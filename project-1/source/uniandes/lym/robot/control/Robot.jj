/**
 * Project 1.
 *
 * JavaCC Robot Language Interpreter.
 *
 * Author: Juan Alegr√≠a - 202011282
 */

options 
{
	LOOKAHEAD = 2; 
	IGNORE_CASE = true;
	STATIC = false;
}

   
PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot {
	private RobotWorldDec world;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String output = new String();
	
	HashMap definedVariables = new HashMap();
	HashMap definedFunctions = new HashMap();

	String turn(String dir) {
	  	String returnMessage = "";
	  	
		if (dir.equals(":right")) { 
			world.turnRight();
			returnMessage = "turned right";
		}
		
		if (dir.equals(":left")) {
		  	world.turnRight();
		 	world.turnRight();
		 	world.turnRight();
		  	returnMessage = "turned left";
		}
		
		 if (dir.equals(":around")) {
		   	world.turnRight();
		   	world.turnRight();
		 	returnMessage = "turned around";
		 }

		 return returnMessage;
	}

	String face(String orientation) {
		String returnMessage = "";
		
		if (orientation.equals(":north")) {
		  while (!world.facingNorth()) {
			world.turnRight();
			returnMessage = "facing north";
		  }
		}

		if (orientation.equals(":south")) {
		  while (!world.facingSouth()) {
			world.turnRight();
			returnMessage = "facing south";
		  }
		}

		if (orientation.equals(":west")) {
		  while (!world.facingWest()) {
			world.turnRight();
			returnMessage = "facing west";
		  }
		}

		if (orientation.equals(":east")) {
		  while (!world.facingEast()) {
			world.turnRight();
			returnMessage = "facing east";
		  }
		}

		return returnMessage;
	}

	String moveDir(int times, String direction) {
		String returnMessage = "";

		if (direction.equals(":front")) {
		  returnMessage = "moving to the front X " + times;
		  while (times != 0) {
			world.up();
			times -= 1;
		  }
		}

		if (direction.equals(":right")) {
		  returnMessage = "moving to the right X " + times;
		  while (times != 0) {
			world.right();
			times -= 1;
		  }
		}

		if (direction.equals(":left")) {
		  returnMessage = "moving to the left X " + times;
		  while (times != 0) {
			world.left();
			times -= 1;
		  }
		}

		if (direction.equals(":back")) {
		  returnMessage = "moving to the back X " + times;
		  while (times != 0) {
			world.down();
			times -= 1;
		  }
		}
		
		return returnMessage;
	}
}

PARSER_END(Robot)

SKIP: {
	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN: { /* Command names */
		<T_DEFVAR:  "defvar">
		| <T_ASSIGN: "=">
		| <T_MOVE:  "move">
		| <T_TURN: "turn">
		| <T_FACE: "face">
		| <T_PUT: "put">
		| <T_PICK: "pick">
		| < T_MOVE_DIR: "move-dir" >
		| < T_RUN_DIRS: "run-dirs" >
		| < T_MOVE_FACE: "move-face" >
		| < T_SKIP: "skip" >
}

TOKEN: { /* Control structures */ 
		<T_IF:  "if">
		| <T_LOOP: "loop">
		| <T_REPEAT: "repeat">
		| <T_DEFUN: "defun">
}

TOKEN: { /* Conditions name*/
	    < T_FACING: "facing-p">
	    | < T_CAN_M: "can-move-p">
	    | < T_CAN_PUT:  "can-put-p" >
	    | < T_CAN_PICK:  "can-pick-p" >
	    |  < T_NOT:  "not" >
}

TOKEN: { /* Objects */
		<T_BALLOONS:  ":balloons" >
		|	<T_CHIPS:     ":chips" >	
}

TOKEN: { 
  		< T_DIRECTION_SIMPLE: ":left" | ":right" | ":around" >
        | < T_DIRECTION: ":front" | ":right" | ":left" | ":back" >
        | < T_ORIENTATION: ":north" | ":south" | ":east" | ":west" >
        | <LST_DIRECTION: (<T_DIRECTION> | <  T_DIRECTION_SIMPLE >)+ >
}

TOKEN: {
        <NUMBER: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		|  < NAME: (["a"-"z"] | ["A"-"Z"])+ (["0"-"9"])* (["a"-"z"])* (["A"-"Z"])* (".")* ("#")* ("@")* ("_")* ("$")*>
}

boolean command(StringBuffer system_) : {	
		int x;
		String y;
		boolean z;
		output = new String();
	}
	{
		(
		    "(" < T_DEFVAR > y = name() x = number() ")" { definedVariables.put(y, x); output = "Command: defined variable " + y + " with value " + definedVariables.get(y);}
		    | "(" < T_ASSIGN > y = assignVar() ")" { output = "Command: assign value " + definedVariables.get(y) + " to variable " + y;}
		    | "(" < T_MOVE > ( x = getVarValue() | x = number() ) ")" { world.moveForward(x); output = "Command: move " + x;}
		    | "(" <  T_TURN > y = getSimpleDirection() ")" { y = turn(y); output = "Command: " + y; }
		    | "(" < T_FACE > y = getOrientation() ")" { y = face(y); output = "Command: " + y; }
		    | "(" < T_PUT > putObj() ")"
		    | "(" < T_PICK > pickObj() ")" 
		    | "("  < T_MOVE_DIR > ( x = getVarValue() | x = number() ) y = getDirection() ")" { y = moveDir(x, y); output = "Command: " + y; }
		    | "("  < T_RUN_DIRS > y = getDirectionList() ")" { /*runDirs(w);*/ }
		    | "("  < T_MOVE_FACE > ( x = getVarValue() | x = number() ) y = getOrientation() ")" {face(y); world.moveForward(x); output = "Command move face"; }
		    | "("  < T_SKIP > ")" {output = "Command: Skip"; }
		    | "(" y = definedFunction() y = paramsVerification(y) executeFunction(y) ")" { }
			| "(" < T_IF > z = condition() executeBlock(z) executeBlock(!z) ")" { }
		    | "(" < T_LOOP > z = condition() executeBlock(z) ")" { }
		    | "(" < T_REPEAT > ( x = getVarValue() | x = number() ) blockRepetition(x) ")" { }
		    | "("  < T_DEFUN > y = name() y = params(y) y = functionBlock(y) ")" { }
		)
	{
		system_.append(output);
		return true;
	}

	| <EOF> {return false;} 
}

void putObj() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS> ( f = getVarValue() | f = number() ) {world.putChips(f); output = "Command:  Put Chips"; })
		| <T_BALLOONS> ( f=number()  {world.putBalloons(f); output = "Command:  Put Balloons";})
}

void pickObj() : {
  int f=1;	
}
{
	( <T_CHIPS> ( f = getVarValue() | f = number() ) {world.pickChips(f); output = "Command:  Pick chips";})
	| ( < T_BALLOONS >  ( f = getVarValue() | f = number() ) {world.grabBalloons(f); output = "Command:  Pick balloons";})	 
}

int number() throws Error: {	
		int total=1;
}
{
	<NUMBER>
    {
		try {
			total = Integer.parseInt(token.image);
		} catch (NumberFormatException ee) {
			throw new Error("Number out of bounds: " + token.image + "!");
		}
		return total;
	}
}

String name(): {
}
{
  	< NAME >
  	{ 
	  	String name = token.image;
		return name;
	}
}

String getSimpleDirection(): {
}
{
  	< T_DIRECTION_SIMPLE >
  	{ 
	  	String direction = token.image;
		return direction;
	}
}

String getDirection() throws Error: {
}
{
  	(< T_DIRECTION > | < T_DIRECTION_SIMPLE >)
  	{ 
	  	String direction = token.image;

		if (direction.equals(":around")) {
		  throw new Error("Error: incorrect direction for this command");
	 	}
	 	
		return direction;
	}
}

String getDirectionList() throws Error: {
  String directions = "";
}
{
  	(< T_DIRECTION > | < T_DIRECTION_SIMPLE >)+
  	{ 
	  	directions += token.image;
		if (directions.contains(":around")) {
		  throw new Error("Error: incorrect direction for this command");
	 	}
	 	
		return directions;
	}
}

String getOrientation(): {
}
{
  	< T_ORIENTATION >
  	{ 
	  	String orientation = token.image;
		return orientation;
	}
}

String assignVar() throws Error: {
}
{
  < NAME >
  {
    String variable = token.image;
    boolean isVarDefined = definedVariables.containsKey(variable);
  }
  < NUMBER >
  {
    if (isVarDefined) {
      	definedVariables.put(variable, token.image);
		return variable;
    } else {
		throw new Error("Error: Use of undefined variable " + variable);
    }
  }
} 

int getVarValue() throws Error: 
{ }
{
  < NAME >
  {
    String variable = token.image;
    boolean isVarDefined = definedVariables.containsKey(variable);
    
    if (isVarDefined) {
		return (int) definedVariables.get(variable);
    } else {
		throw new Error("Error: Use of undefined variable " + variable);
    }
  }
} 

boolean condition(): {
  	int x;
  	String y;
	boolean evaluation = true;
}
{
  "(" < T_FACING > < T_ORIENTATION > ")" { }
  | "(" < T_CAN_M > < T_DIRECTION >")" {} 
  | "(" < T_CAN_PUT > ( < T_BALLOONS > | < T_CHIPS > ) ( x = number() | x = getVarValue() )")" {}
  | "(" < T_CAN_PICK > ( < T_BALLOONS > | < T_CHIPS > ) ( x = number() | x = getVarValue() )")" { evaluation = true; }
  | "(" < T_NOT > condition() ")" {}
  | "(" y = definedFunction() y = paramsVerification(y) evaluation = executeFunction(y) ")" {}
  {
    return evaluation;
  }
}

String definedFunction() throws Error: 
{ }
{
  < NAME >
  {
    String calledFunction = token.image;
    boolean isFuncDefined = definedFunctions.containsKey(calledFunction);
    
    if (isFuncDefined) {
		return (String) definedFunctions.get(calledFunction);
    } else {
		throw new Error("Error: Use of undefined function " + calledFunction);
    }
  }
} 

String params(String functionName) throws Error: 
{}
{
  "(" (< NAME >)* ")"
  {
    return "true";
  }
}

String paramsVerification(String functionName):
{}
{
  "(" (< NUMBER >)* ")"
  {
    return "true";
  }
}

boolean executeFunction(String functionInformation):
{}
{
  < NAME >
  {
    return true;
  }
}

void executeBlock(boolean isExecutable):
{}
{
  < NAME >
  { 
  if (isExecutable) {
    // Run block
    return;
  }
  }
}

String functionBlock(String funcNameAndParams): {
}
{
  < NAME >
  {
    return "";
  }
}

void blockRepetition(int repetitions): {
}
{
  < NAME >
  {
    return;
  }
}
