/*
Project 1.

JavaCC Robot Language Interpreter.

Author: Juan Alegr√≠a - 202011282
 **/

options 
{
	LOOKAHEAD = 1; 
	IGNORE_CASE = true;
	STATIC = false;
}

   
PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot {
	private RobotWorldDec world;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String output = new String();
}

PARSER_END(Robot)

SKIP: {
	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN: { /* Command names */
		<T_DEFVAR:  "defvar">
		| <T_ASSIGN: "=">
		| <T_MOVE:  "move">
		| <T_TURN: "turn">
		| <T_FACE: "face">
		| <T_PUT: "put">
		| <T_PICK: "pick">
		| < T_MOVE_DIR: "move-dir" >
		| < T_RUN_DIRS: "run-dirs" >
		| < T_MOVE_FACE: "move-face" >
		| < T_SKIP: "skip" >
}

TOKEN: { /* Control structures */ 
		<T_IF:  "if">
		| <T_LOOP: "loop">
		| <T_REPEAT: "repeat">
		| <T_DEFUN: "defun">
}

TOKEN: { /* Conditions name*/ 
	    < T_CONDITION: "facing-p" | "can-put-p" | "can-pick-p" | "can-move-p" | "not">
}

TOKEN: { /* Objects */
  		< T_OBJ: <T_BALLOONS> | <T_CHIPS> >
		|  <T_BALLOONS:  "ballons" >
		|	<T_CHIPS:     "chips" >	
}

TOKEN: { 
  		< T_DIRECTION_SIMPLE: ":left" | ":right" | ":around" >
        | < T_DIRECTION: ":front" | ":right" | ":left" | "back" >
        | < T_ORIENTATION: ":north" | ":south" | ":east" | ":west" >
        | <LST_DIRECTION: (<T_DIRECTION>)+ >
}

TOKEN: {
        <NUMBER: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		|  < VAR: (["a"-"z"] | ["A"-"Z"])+ (["0"-"9"])* (["a"-"z"])* (["A"-"Z"])* (".")* ("#")* ("@")* ("_")* ("$")*>
}

boolean command(StringBuffer system_) : {	
		int x;
		output = new String();
		String[] defined_names;
	}
	
	{
//		(
//	    <T_TURNRIGHT> "(" ")" { world.turnRight(); salida = "Command: Turnright"; }
//		| 	<T_MOVE>  "(" x=numero() ")" {world.moveForward(x);salida = "Command: Moveforward ";}  
//		|  <T_PONER> "("  objetoPoner() ")"					  			
//		|  <T_RECOGER> "("  objetoRecoger()  ")"	
//	    |  < T_POP > "(" x=numero() ")" {world.popBalloons(x); output = "Comando:  Pop";}
//		)

//		(defvar name n)
//		(= name n)
//		(move n)
//		(turn D)
//		(face O)
//		(put X n)
//		(pick X n)
//		(move-dir n D)
//		(run-dirsr Ds)
//		(move-face n O)
//		(skip)
//		(funcname params)

	{
		system_.append(output);
		return true;
	}
}

void putObj() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f = number() {world.putChips(f); output = "Command:  Put Chips"; })
		| ( <T_BALLOONS>   "," f=number() {world.putBalloons(f); output = "Command:  Put Balloons";})
}

void pickObj() : {
  int f=1;	
}
{
	( <T_CHIPS>   "," f=number() {world.pickChips(f); output = "Command:  Pick chips";})
	| ( <T_BALLOONS>   "," f=number() {world.grabBalloons(f); output = "Command:  Pick balloons";})	 
}

int number() throws Error: {	
		int total=1;
}
{
	<NUMBER>
    {
		try {
			total = Integer.parseInt(token.image);
		} catch (NumberFormatException ee) {
			throw new Error("Number out of bounds: " + token.image + "!");
		}
		return total;
	}
}
