// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Coder.gold"
import gold.structures.automaton.*;
import gold.structures.map.*;
import gold.util.*;
import gold.visualization.automaton.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Coder {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=17;
      Object m=$fix(Coder.createTransducer());
      $line=19;
      Coder.test($cast(gold.structures.automaton.IAutomaton.class,m));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"main",$line);
    }
  }
  public static Object toSet(Object C) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object x:GCollections.unmodifiableCollection(C)) {
        $v1.add(x);
      }
      $result=$v1;
      if (true) break $try;
      $line=22;
      $rethrow(new RuntimeException("The function \"toSet(C:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"toSet",$line);
    }
    return $result;
  }
  public static Object test(IAutomaton M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=24;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=25;
      Object isTransducer=$fix($invokeMethod("isInstance",$invokeField(ITransducer.class,"class",true,null),new Object[]{M}));
      $line=26;
      while (true) {
        if (!($bool(true))) break;
        $line=27;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=28;
        System.out.println($message(new Object[]{"Input String  empty string to exit): "}));
        $line=30;
        Object string=$fix(((java.util.Scanner)sc).nextLine());
        $line=31;
        if ($opEqualY(string,"")) {
          $line=31;
          break;
        }
        $line=33;
        Object inputM=$fix(Coder.toSet(((gold.structures.automaton.IAutomaton)M).getAlphabet()));
        $line=35;
        if ($bool($invokeMethod("containsAll",((gold.structures.automaton.IAutomaton)M).getAlphabet(),new Object[]{string}))) {
          $line=36;
          Object result=$fix(((gold.structures.automaton.IAutomaton)M).acceptsString($cast(java.lang.String.class,string)));
          $line=37;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The string was ",(($bool(result))?("accepted!"):("rejected."))),(($bool(isTransducer))?(". Output:"):("")))}));
          $line=38;
          if ($bool(isTransducer)) {
            $line=39;
            System.out.println($message(new Object[]{$invokeMethod("getOutputString",$cast(ITransducer.class,M),new Object[]{})}));
          }
        }
        else {
          $line=42;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Coder.toSet(string),inputM))}));
        }
      }
      $line=45;
      System.out.println($message(new Object[]{"Execution terminated"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"test",$line);
    }
    return $result;
  }
  public static ITransducer createTransducer() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=50;
      Object Q=$fix($opCartsY(new Object[]{$opIntvlY(0,7),$opIntvlY(0,1)}));
      $line=52;
      Object \u03A3=$fix($opUnionY($opIntvlY('a','z'),GCollections.asSet(' ')));
      $line=53;
      Object Out=$fix($opUnionY($opIntvlY('a','z'),GCollections.asSet(' ')));
      $line=55;
      Object q_0=$fix(GCollections.asList(1,0));
      $line=56;
      Object F=$fix(Q);
      $line=57;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(Coder.class,"\u03B4"),new GMethod(Coder.class,"g"),new GMethod(Coder.class,"h")});
      if (true) break $try;
      $line=58;
      $rethrow(new RuntimeException("The function \"createTransducer()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(java.lang.Iterable $v3, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v4=GCollections.unmodifiableCollection($v3).iterator();
      Object f=$v4.next();
      Object r=$v4.next();
      $line=61;
      if ($opEqualY(s,' ')) {
        $line=61;
        $result=GCollections.asList($opModulY($opAdditY(f,1),8),0);
        if (true) break $try;
      }
      else {
        $line=62;
        if ($opEqualY(r,0)) {
          $line=62;
          $result=GCollections.asList(f,1);
          if (true) break $try;
        }
      }
      $line=64;
      $result=GCollections.asList(f,r);
      if (true) break $try;
      $line=65;
      $rethrow(new RuntimeException("The function \"\u03B4(\u27E8f,r\u27E9:java.lang.Iterable,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object h(java.lang.Iterable $v5, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v6=GCollections.unmodifiableCollection($v5).iterator();
      Object f=$v6.next();
      Object r=$v6.next();
      $line=68;
      if ($opEqualY(s,' ')) {
        $line=68;
        $result=' ';
        if (true) break $try;
      }
      else {
        $line=69;
        if ($opEqualY(r,0)) {
          $line=69;
          $result=Coder.shiftFirstSymbol(s,f);
          if (true) break $try;
        }
      }
      $line=71;
      $result=Coder.shiftOtherSymbols(s,f);
      if (true) break $try;
      $line=72;
      $rethrow(new RuntimeException("The function \"h(\u27E8f,r\u27E9:java.lang.Iterable,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"h",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=76;
      $result="";
      if (true) break $try;
      $line=77;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"g",$line);
    }
    return $result;
  }
  public static Object shiftFirstSymbol(Object symbol, Object shift) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=80;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=82;
      if ($opMembrY(symbol,$opIntvlY('a','z'))) {
        $line=83;
        r=$cast(Character.class,$fix($opAdditY('a',$opModulY($opAdditY($opSubtrY(symbol,'a'),shift),26))));
      }
      else {
        $line=85;
        r=$cast(Character.class,$fix(symbol));
      }
      $line=87;
      $result=r;
      if (true) break $try;
      $line=88;
      $rethrow(new RuntimeException("The function \"shiftFirstSymbol(symbol:Object,shift:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"shiftFirstSymbol",$line);
    }
    return $result;
  }
  public static Object shiftOtherSymbols(Object symbol, Object shift) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=91;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=93;
      if ($opMembrY(symbol,$opIntvlY('a','z'))) {
        $line=94;
        r=$cast(Character.class,$fix($opAdditY('a',$opModulY($opSubtrY($opSubtrY($opAdditY($opAdditY($opSubtrY(symbol,2),symbol),shift),'a'),'a'),26))));
      }
      else {
        $line=96;
        r=$cast(Character.class,$fix(symbol));
      }
      $line=98;
      $result=r;
      if (true) break $try;
      $line=99;
      $rethrow(new RuntimeException("The function \"shiftOtherSymbols(symbol:Object,shift:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Coder.class,"shiftOtherSymbols",$line);
    }
    return $result;
  }
}
