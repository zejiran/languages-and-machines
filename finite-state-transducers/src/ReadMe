
This Folder contains Finite State Transducer examples

Utilities: 
	contains functions for testing transducers
	
Amod3.gold
	Contains both the coder and decoder for coding strings of {a,b}. At each step it writes the number of a's % 3 that have appeared.
Div4: 
	Reads N a number in base 10 ending in $. (N div 4)  R (N mod 4)
Mult4:
    Reads the reverse of the result of Div 4 ending in $; computes the result of multiplying the quotient an adding the remainder. However, to test it you do not have to enter the reverse of the number. The test  function does this or you. Just write qRr, where q is the quotient an  r is the remainder.
ReplaceCat_GOLD:
	Reads a string of {c,a, t} followed by $ and outputs the same string replacing K for each occurrence of cat.
ReplaceK_GOLD:
	 Reads a string of {c,a, t,K} followed by $ and outputs the same string replacing cat for each occurrence of K. Verifies that cat does not appear in the string.
ZIP.gold
	Reads a string of A. If it finds sequences of the same symbol. The symbol followed by the number of times it appears, replaces the sequence. It only replace sequences <= 5. Longer sequences are split up. The input shoild en woht $. $ is not in A. A by default is (a..c); it can be changed by running GOLD woth parameters:  the alphabet, without commas nor {}.
UNZip.gold
	Reads the result of ZIP and outputs the original string. Verifies, that the input string  in fact was generated by ZIP. For instance a3a2 would be an error.
CodeDeCode_CatK1.gold
	Tests ReplaceCat_GOLD and  ReplaceK_GOLD together
DivideMult.gold
	Tests Div4 and  Mult4 together
ZipUnZip.gold
	Tests ZIP and  UnZip together

	
