// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/TestPerm4.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class TestPerm4 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object A=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=23;
      if ($opEqualY($invokeField("length",args),0)) {
        $line=23;
        A=$fix($opIntvlY('a','g'));
      }
      else {
        $line=25;
        gold.structures.set.ISet $v1=$newSet();
        int $v3=$int(0);
        int $v4=$int($invokeMethod("length",((java.lang.String[])args)[$int(0)],new Object[]{}))-1;
        $v2:for (int i=$v3; i<=$v4; i++) {
          $v1.add($invokeMethod("charAt",((java.lang.String[])args)[$int(0)],new Object[]{i}));
        }
        A=$fix($opDiffeY($v1,GCollections.asSet('$')));
      }
      $line=28;
      TestPerm4.testPerm($cast(gold.structures.automaton.IAutomaton.class,TestPerm4.create()));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,TestPerm4.class,"main",$line);
    }
  }
  public static IAutomaton create() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=35;
      Object Q=$fix($opUnionY($opPwsetY(A),$opCartsY(new Object[]{$opPwsetY(A),$opPwsetY(A)})));
      $line=36;
      Object \u03A3=$fix(A);
      $line=37;
      Object \u0393=$fix(GCollections.asSet('1'));
      $line=38;
      Object q_0=$fix(GCollections.emptySet());
      $line=39;
      gold.structures.set.ISet $v5=$newSet();
      $v6:for (Object S:GCollections.unmodifiableCollection($opPwsetY(A))) {
        for (Object T:GCollections.singletonCollection(GCollections.emptySet())) {
          $v5.add(GCollections.asList(S,T));
        }
      }
      Object F=$fix($v5);
      $line=40;
      System.out.println($message(new Object[]{F}));
      $line=42;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=45;
      for (Object $v7:GCollections.unmodifiableCollection($opPwsetY(A))) {
        Object S=$v7;
        $line=46;
        $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(S,GCollections.asList(S,$opDiffeY(\u03A3,S)),$cast(java.lang.String.class,"")),new Object[]{});
        $line=47;
        for (Object $v8:GCollections.unmodifiableCollection(A)) {
          Object t=$v8;
          $line=48;
          $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta(S,$opUnionY(S,GCollections.asSet(t)),$cast(java.lang.String.class,t)),new Object[]{"1"});
          $line=49;
          for (Object $v9:GCollections.unmodifiableCollection($opPwsetY(A))) {
            Object T=$v9;
            $line=50;
            if (!$bool($opMembrY(t,S))) {
              $line=51;
              $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta(GCollections.asList(S,T),GCollections.asList(S,$opDiffeY(T,GCollections.asSet(t))),$cast(java.lang.String.class,t)),new Object[]{"1"});
            }
          }
        }
      }
      $line=59;
      $result=M;
      if (true) break $try;
      $line=60;
      $rethrow(new RuntimeException("The function \"create()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,TestPerm4.class,"create",$line);
    }
    return $cast(IAutomaton.class,$result);
  }
  public static Object testPerm(IAutomaton C) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=66;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=67;
      String string=null;
      string=$defaultValue(String.class);
      $line=70;
      System.out.println($message(new Object[]{"Testing"}));
      $line=72;
      while (true) {
        if (!($bool(true))) break;
        $line=73;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=74;
        System.out.println($message(new Object[]{"Enter a string:"}));
        $line=75;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
        $line=76;
        if ($opEqualY(string,"STOP")) {
          $line=76;
          break;
        }
        $line=77;
        Object result=$fix(((gold.structures.automaton.IAutomaton)C).acceptsString($cast(java.lang.String.class,string)));
        $line=78;
        System.out.println($message(new Object[]{$opAdditY("The string was ",(($bool(result))?("accepted"):("REJECTED")))}));
      }
      $line=80;
      System.out.println($message(new Object[]{"End test"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,TestPerm4.class,"testPerm",$line);
    }
    return $result;
  }
}
