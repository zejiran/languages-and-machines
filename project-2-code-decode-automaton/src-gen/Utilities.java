// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Utilities.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Utilities {
  public static Object toSet(Object C) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object x:GCollections.unmodifiableCollection(C)) {
        $v1.add(x);
      }
      $result=$v1;
      if (true) break $try;
      $line=6;
      $rethrow(new RuntimeException("The function \"toSet(C:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"toSet",$line);
    }
    return $result;
  }
  public static Object reverse(String s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result=$invokeMethod("toString",$invokeMethod("reverse",$invokeConstructor(StringBuilder.class,new Object[]{s}),new Object[]{}),new Object[]{});
      if (true) break $try;
      $line=8;
      $rethrow(new RuntimeException("The function \"reverse(s:String)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"reverse",$line);
    }
    return $result;
  }
  public static Object testBlock(IAutomaton M, Object testCases) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=12;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=13;
      Object isTransducer=$fix($invokeMethod("isInstance",$invokeField(ITransducer.class,"class",true,null),new Object[]{M}));
      $line=19;
      for (Object $v3:GCollections.unmodifiableCollection(testCases)) {
        java.util.Iterator $v4=GCollections.unmodifiableCollection($v3).iterator();
        Object s=$v4.next();
        Object r=$v4.next();
        $line=20;
        Object result=$fix(((gold.structures.automaton.IAutomaton)M).acceptsString($cast(java.lang.String.class,s)));
        $line=21;
        Object t=$fix((($bool($opEqualY(s,"")))?("\u03BB"):(s)));
        $line=22;
        if (($opEqualY(r,result)&&$bool(result))) {
          $line=23;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("String: ",t)," was correctly accepted")}));
        }
        else {
          $line=24;
          if ($opEqualY(r,result)) {
            $line=25;
            System.out.println($message(new Object[]{$opAdditY($opAdditY("String: ",t)," was correctly rejected")}));
          }
          else {
            $line=26;
            if ($bool(result)) {
              $line=27;
              System.out.println($message(new Object[]{$opAdditY($opAdditY("String: ",t)," was incorrectly accepted")}));
            }
            else {
              $line=29;
              System.out.println($message(new Object[]{$opAdditY($opAdditY("String: ",t)," was incorrectly rejected")}));
            }
          }
        }
      }
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"testBlock",$line);
    }
    return $result;
  }
  public static Object test(IAutomaton M, String add, Boolean rev) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=41;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=42;
      Object isTransducer=$fix($invokeMethod("isInstance",$invokeField(ITransducer.class,"class",true,null),new Object[]{M}));
      $line=43;
      while (true) {
        if (!($bool(true))) break;
        $line=44;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=45;
        System.out.println($message(new Object[]{"Input String (empty string to exit): "}));
        $line=47;
        Object string=$fix(((java.util.Scanner)sc).nextLine());
        $line=48;
        if ($opEqualY(string,"")) {
          $line=48;
          break;
        }
        $line=50;
        Object inputM=$fix(Utilities.toSet(((gold.structures.automaton.IAutomaton)M).getAlphabet()));
        $line=52;
        if ($bool(rev)) {
          $line=53;
          string=$fix(Utilities.reverse($cast(java.lang.String.class,string)));
          $line=54;
          System.out.println($message(new Object[]{$opAdditY("reverse: ",string)}));
        }
        $line=56;
        string=$fix($opAdditY(string,add));
        $line=57;
        if ($bool($invokeMethod("containsAll",((gold.structures.automaton.IAutomaton)M).getAlphabet(),new Object[]{string}))) {
          $line=59;
          Object result=$fix(((gold.structures.automaton.IAutomaton)M).acceptsString($cast(java.lang.String.class,string)));
          $line=61;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The string was ",(($bool(result))?("accepted!"):("rejected."))),(($bool(isTransducer))?(". Output:"):("")))}));
          $line=62;
          if ($bool(isTransducer)) {
            $line=63;
            System.out.println($message(new Object[]{$invokeMethod("getOutputString",$cast(ITransducer.class,M),new Object[]{})}));
            $line=64;
            if ($bool(rev)) {
              $line=64;
              System.out.println($message(new Object[]{$opAdditY("reverse: ",Utilities.reverse($cast(java.lang.String.class,$invokeMethod("getOutputString",$cast(ITransducer.class,M),new Object[]{}))))}));
            }
          }
        }
        else {
          $line=67;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputM))}));
        }
      }
      $line=70;
      System.out.println($message(new Object[]{"Execution terminated"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"test",$line);
    }
    return $result;
  }
  public static Object test(IAutomaton M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=79;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=80;
      Object isTransducer=$fix($invokeMethod("isInstance",$invokeField(ITransducer.class,"class",true,null),new Object[]{M}));
      $line=81;
      while (true) {
        if (!($bool(true))) break;
        $line=82;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=83;
        System.out.println($message(new Object[]{"Input String (empty string to exit): "}));
        $line=85;
        Object string=$fix(((java.util.Scanner)sc).nextLine());
        $line=86;
        if ($opEqualY(string,"")) {
          $line=86;
          break;
        }
        $line=88;
        Object inputM=$fix(Utilities.toSet(((gold.structures.automaton.IAutomaton)M).getAlphabet()));
        $line=90;
        if ($bool($invokeMethod("containsAll",((gold.structures.automaton.IAutomaton)M).getAlphabet(),new Object[]{string}))) {
          $line=91;
          Object result=$fix(((gold.structures.automaton.IAutomaton)M).acceptsString($cast(java.lang.String.class,string)));
          $line=92;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The string was ",(($bool(result))?("accepted!"):("rejected."))),(($bool(isTransducer))?(". Output:"):("")))}));
          $line=93;
          if ($bool(isTransducer)) {
            $line=94;
            System.out.println($message(new Object[]{$invokeMethod("getOutputString",$cast(ITransducer.class,M),new Object[]{})}));
          }
        }
        else {
          $line=97;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputM))}));
        }
      }
      $line=100;
      System.out.println($message(new Object[]{"Execution terminated"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"test",$line);
    }
    return $result;
  }
  public static Object testR(IAutomaton M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=106;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=107;
      Object isTransducer=$fix($invokeMethod("isInstance",$invokeField(ITransducer.class,"class",true,null),new Object[]{M}));
      $line=108;
      while (true) {
        if (!($bool(true))) break;
        $line=109;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=110;
        System.out.println($message(new Object[]{"Input String (empty string to exit): "}));
        $line=112;
        Object string=$fix(((java.util.Scanner)sc).nextLine());
        $line=113;
        if ($opEqualY(string,"")) {
          $line=113;
          break;
        }
        $line=115;
        Object inputM=$fix(Utilities.toSet(((gold.structures.automaton.IAutomaton)M).getAlphabet()));
        $line=117;
        if ($bool($invokeMethod("containsAll",((gold.structures.automaton.IAutomaton)M).getAlphabet(),new Object[]{string}))) {
          $line=118;
          Object result=$fix(((gold.structures.automaton.IAutomaton)M).acceptsString($cast(java.lang.String.class,$opAdditY(Utilities.reverse($cast(java.lang.String.class,string)),"$"))));
          $line=119;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The string was ",(($bool(result))?("accepted!"):("rejected."))),(($bool(isTransducer))?(". Output:"):("")))}));
          $line=120;
          if ($bool(isTransducer)) {
            $line=121;
            System.out.println($message(new Object[]{Utilities.reverse($cast(java.lang.String.class,$invokeMethod("getOutputString",$cast(ITransducer.class,M),new Object[]{})))}));
          }
        }
        else {
          $line=124;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputM))}));
        }
      }
      $line=127;
      System.out.println($message(new Object[]{"Execution terminated"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"testR",$line);
    }
    return $result;
  }
  public static Object testCodeDecodeRevAddDS(ITransducer C, ITransducer D) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=134;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=136;
      Object inputC=$fix(Utilities.toSet(((gold.structures.automaton.ITransducer)C).getInputAlphabet()));
      $line=137;
      Object inputD=$fix(Utilities.toSet(((gold.structures.automaton.ITransducer)D).getInputAlphabet()));
      $line=139;
      System.out.println($message(new Object[]{"Testing Coder- Reverse Decoder"}));
      $line=140;
      Object string=$fix(" ");
      $line=141;
      boolean $v5=false;
      while (true) {
        if ($v5) {
          if ($bool(false)) break;
        }
        $v5=true;
        $line=142;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=143;
        System.out.println($message(new Object[]{"Input string: (empty string to end)"}));
        $line=145;
        string=$fix(((java.util.Scanner)sc).nextLine());
        $line=146;
        if ($opEqualY(string,"")) {
          $line=146;
          break;
        }
        else {
          $line=148;
          Object option=$fix("");
          $line=149;
          while (true) {
            if (!(!$opMembrY(option,GCollections.asSet("1","2","3")))) break;
            $line=150;
            System.out.println($message(new Object[]{"What do you want to do?"}));
            $line=151;
            System.out.println($message(new Object[]{"1. code only?"}));
            $line=152;
            System.out.println($message(new Object[]{"2. code and decode (rev)?"}));
            $line=153;
            System.out.println($message(new Object[]{"3. decode only (rev)?"}));
            $line=155;
            option=$fix(((java.util.Scanner)sc).nextLine());
          }
          $line=157;
          Object stringOut=$fix("");
          $line=159;
          if (($opEqualY(option,"1")||$opEqualY(option,"2"))) {
            $line=161;
            if ($opSbsetY(Utilities.toSet(string),inputC)) {
              $line=162;
              Object result=$fix(((gold.structures.automaton.ITransducer)C).acceptsString($cast(java.lang.String.class,$opAdditY(string,"$"))));
              $line=163;
              System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted"))),". Output: "),((gold.structures.automaton.ITransducer)C).getOutputString())}));
              $line=164;
              stringOut=$fix(((gold.structures.automaton.ITransducer)C).getOutputString());
              $line=165;
              if ($opEqualY(option,"2")) {
                $line=166;
                if ($opSbsetY(Utilities.toSet(stringOut),inputD)) {
                  $line=168;
                  result=$fix(((gold.structures.automaton.ITransducer)D).acceptsString($cast(java.lang.String.class,$opAdditY(Utilities.reverse($cast(java.lang.String.class,stringOut)),"$"))));
                  $line=169;
                  Object stringOut1R=$fix(Utilities.reverse($cast(java.lang.String.class,((gold.structures.automaton.ITransducer)D).getOutputString())));
                  $line=171;
                  System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The Reverse of the coded string was ",(($bool(result))?("accepted"):("not accepted"))),". Output: "),Utilities.reverse($cast(java.lang.String.class,((gold.structures.automaton.ITransducer)D).getOutputString())))}));
                  $line=172;
                  System.out.println($message(new Object[]{$opAdditY($opAdditY("The Reverse of the decoded string is ",((!$opEqualY(stringOut1R,string))?("not "):(""))),"equal to the original string.")}));
                }
                else {
                  $line=174;
                  System.out.println($message(new Object[]{$opAdditY("Output contains invalid symbols for the decoder: ",$opDiffeY(Utilities.toSet(stringOut),inputD))}));
                }
              }
            }
            else {
              $line=179;
              System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputC))}));
            }
          }
          else {
            $line=182;
            if ($opSbsetY(Utilities.toSet(string),inputD)) {
              $line=183;
              Object result=$fix(((gold.structures.automaton.ITransducer)D).acceptsString($cast(java.lang.String.class,$opAdditY(Utilities.reverse($cast(java.lang.String.class,string)),"$"))));
              $line=184;
              System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted")))," by the decoder. Output: "),Utilities.reverse($cast(java.lang.String.class,((gold.structures.automaton.ITransducer)D).getOutputString())))}));
            }
            else {
              $line=186;
              System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputD))}));
            }
          }
        }
      }
      $line=193;
      System.out.println($message(new Object[]{"Execution Ended"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"testCodeDecodeRevAddDS",$line);
    }
    return $result;
  }
  public static Object testCodeDecode(ITransducer C, ITransducer D) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=199;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=201;
      Object inputC=$fix(Utilities.toSet(((gold.structures.automaton.ITransducer)C).getInputAlphabet()));
      $line=202;
      Object inputD=$fix(Utilities.toSet(((gold.structures.automaton.ITransducer)D).getInputAlphabet()));
      $line=204;
      System.out.println($message(new Object[]{"Testing Coder-Decoder"}));
      $line=205;
      Object string=$fix(" ");
      $line=206;
      boolean $v6=false;
      while (true) {
        if ($v6) {
          if ($bool(false)) break;
        }
        $v6=true;
        $line=207;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=208;
        System.out.println($message(new Object[]{"Input string: (empty string to end)"}));
        $line=210;
        string=$fix(((java.util.Scanner)sc).nextLine());
        $line=211;
        if ($opEqualY(string,"")) {
          $line=211;
          break;
        }
        else {
          $line=213;
          Object option=$fix("");
          $line=214;
          while (true) {
            if (!(!$opMembrY(option,GCollections.asSet("1","2","3")))) break;
            $line=215;
            System.out.println($message(new Object[]{"What do you want to do?"}));
            $line=216;
            System.out.println($message(new Object[]{"1. code only?"}));
            $line=217;
            System.out.println($message(new Object[]{"2. code and decode?"}));
            $line=218;
            System.out.println($message(new Object[]{"3. decode only?"}));
            $line=220;
            option=$fix(((java.util.Scanner)sc).nextLine());
          }
          $line=222;
          Object stringOut=$fix("");
          $line=223;
          if (($opEqualY(option,"1")||$opEqualY(option,"2"))) {
            $line=225;
            if ($opSbsetY(Utilities.toSet(string),inputC)) {
              $line=226;
              Object result=$fix(((gold.structures.automaton.ITransducer)C).acceptsString($cast(java.lang.String.class,string)));
              $line=227;
              System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted"))),". Output: "),((gold.structures.automaton.ITransducer)C).getOutputString())}));
              $line=228;
              stringOut=$fix(((gold.structures.automaton.ITransducer)C).getOutputString());
              $line=229;
              if ($opEqualY(option,"2")) {
                $line=230;
                if ($opSbsetY(Utilities.toSet(stringOut),inputD)) {
                  $line=231;
                  result=$fix(((gold.structures.automaton.ITransducer)D).acceptsString($cast(java.lang.String.class,stringOut)));
                  $line=232;
                  System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The coded string was ",(($bool(result))?("accepted"):("not accepted"))),". Output: "),((gold.structures.automaton.ITransducer)D).getOutputString())}));
                  $line=233;
                  Object stringOut1=$fix(((gold.structures.automaton.ITransducer)D).getOutputString());
                  $line=234;
                  System.out.println($message(new Object[]{$opAdditY($opAdditY("The decoded string is ",((!$opEqualY(stringOut1,string))?("not "):(""))),"equal to the original string.")}));
                }
                else {
                  $line=236;
                  System.out.println($message(new Object[]{$opAdditY("Output contains invalid symbols for the decoder: ",$opDiffeY(Utilities.toSet(stringOut),inputD))}));
                }
              }
            }
            else {
              $line=241;
              System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputC))}));
            }
          }
          else {
            $line=244;
            if ($opSbsetY(Utilities.toSet(string),inputD)) {
              $line=245;
              Object result=$fix(((gold.structures.automaton.ITransducer)D).acceptsString($cast(java.lang.String.class,string)));
              $line=246;
              System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted")))," by the decoder. Output: "),((gold.structures.automaton.ITransducer)D).getOutputString())}));
            }
            else {
              $line=248;
              System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(Utilities.toSet(string),inputD))}));
            }
          }
        }
      }
      $line=255;
      System.out.println($message(new Object[]{"Execution Ended"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Utilities.class,"testCodeDecode",$line);
    }
    return $result;
  }
}
