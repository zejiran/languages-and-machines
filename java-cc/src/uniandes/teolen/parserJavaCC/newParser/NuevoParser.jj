/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
*/



options
{
  static = false;
}

PARSER_BEGIN(NuevoParser)
package uniandes.teolen.parserJavaCC.newParser;

public class NuevoParser
{
  
}

PARSER_END(NuevoParser)

SKIP :
{
  " "
| "\r" 
| "\t"
| "\n"
}

TOKEN : // OPERATORS 
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{
  <INT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

int one_line() :
{}
{
  (exp() ";" | ";")
  {
    return (int) Math.pow(2,3);
  }
}

void exp() :
{}
{
// Parses  E -> E + T
//         E -> E - T
//         E -> T
//   in EBNF:  E -> T {+ T   | - T }
  
 term() ( < PLUS > term() | < MINUS > term() )*
}

void term() :
{}
{
// Parses  T -> T * F
//         T -> T / F
//         T -> F
//   in EBNF:  T -> F {* F   | /  F }
  
 fact() ( < MULTIPLY > fact() | < DIVIDE > fact() )*
}

void fact() :
{
// Parses  F -> B
//         F -> -B
//         B -> num
//         B -> '(' E ')'
//   in EBNF:  F -> [-](num |'(' E ')')
}
{
    (< MINUS >)? (num()| "(" exp() ")")
}


int num() throws Error:
{	
	int total=1;
	Token token;
}

{
	(token=<INT>)

	{ 
		try {
			total = Integer.parseInt(token.image);
		} 
		catch (NumberFormatException ee) 
		{
			// Dada la forma de <ENTERO>, sabemos que solo puede tener digitos 
			throw new Error("Numero demasiado grande"+token.image);
		}
		return total;
     }
     
     
}


