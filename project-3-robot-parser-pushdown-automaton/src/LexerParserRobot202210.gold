/**
 * P3
 *
 * A stack automaton to perform a syntactical analysis of
 * tokenized routines for a Robot.
 * 
 * Author: Juan Alegría - 202011282
 */

using gold.**

var currentString: String
var images: GArrayList()

var allSymbols: ISet
var keyWords: ISet
var skipChars: ISet

var preKW: ISet
var preOps: ISet

var StartOps: ISet
var Symbols1: ISet

var CharsSymbols1: ISet

var alphaUpper: ISet
var alphaLower: ISet
var digits: ISet

var alphaNum: ISet

var Out: ISet
var diffIdents: Boolean

var Ids: ISet
var translation: GHashTableMap() 
chars(string) := { string.charAt(i) | 0 <= i < string.length() } 
charsStrings(strings) := ( ∪ s | s ∈ strings: chars(s))
elements(array) := { array[i] | 0 <= i < | array | }
prefixes(string) := { string.substring(0, i) | 1 <= i <= string.length() }
splits(string) := { ⟨ string.substring(0, i) , string.substring(i, string.length()) ⟩ | 1 <= i <= string.length()-1 } 
allPrefixes(strings) := ( ∪ s | s ∈ strings: prefixes(s) ) 
translationGet(q) := ( ( | q | = 1 and q ∈ Symbols1 and q != '\n' ) ? q: translation.get(q) )

procedure main(args: String[]) begin
	currentString := λ
	lexer = createLexer() 
	parser = createParser()

	// testLexer(lexer)
	GAutomataFrame.show(parser) 
	testLexerParser(lexer, parser)
end

procedure testLexer(M: ITransducer) begin
	var sc: java.util.Scanner(System.$in)
	var string: String
	inputA = elements(M.getInputAlphabet())
	input = ""

	print "----------------------------"
	print "Enter one or more lines. End with a single line with $"
	print "If you want to stop testing, enter EXIT"
	string := sc.nextLine()

	while string != "EXIT" do
		string := string + " \n "
		input := ""
		while string.charAt(0) != '$' do
			input := input + string
			string := sc.nextLine() + " \n  "
		end

		if chars(input) ⊆ inputA then
			currentString := λ
			images := GArrayList()
			result := M.acceptsString(input)
			tokenStream := M.getOutputString()

			print "The input was " + ( result ? "" : "not " ) + " accepted by the lexer."
			if result then
				print "Token Stream:  " + tokenStream
				print "Strings: " + images
			else
				print "Partial token Stream " + tokenStream
			end
		else
			print "Input contains invalid characters: " + ( chars ( input ) \ inputA )
		end
		print "----------------------------"

		print "Enter one or more lines. End with a single line with $"
		print "If you want to stop testing, enter EXIT" 
		string := sc.nextLine()
	end
	print "Good bye"
	print ""

end

function problems(q: String) begin
	if q in allSymbols then
		return false
	elseif | q | ≤ 1 then
		return true
	else
		for each ⟨ s , t ⟩ in splits(q) do
			if not problems(s) and not problems(t) then
				return false
			end
		end
		return true
	end
end

function translationPreOps(state) begin
	var x , y
	var q: String
	q := state 
	n := q.length()
	if n = 0 then
		return λ
	elseif q ∈ allSymbols then
		images.add(q)
		return translationGet(q)
	elseif n = 1 then
		return λ
	else
		for each ⟨ s , t ⟩ in splits(q) do
			x := translationPreOps(s)
			y := translationPreOps(t)
			if x ≠ λ and y ≠ λ then
				return x + y
			end
		end
		return λ
	end
end

procedure initialize() begin
	skipChars := { ' ' , '\t' , '\n' }
	alphaUpper := ('A'‥'Z')
	alphaLower := ('a'‥'z')
	digits := ('0'‥'9')
	alphaNum := alphaUpper ∪ alphaLower ∪ digits ∪ { '-' } // Alphanumeric characters
	keyWords := { 
					":north", ":south", ":east", ":west",
					":front", ":back", ":right", ":left",
					":around", ":balloons", ":chips", "=", 
					"defvar", "move", "turn", "face", "put",
					"pick", "move-dir", "run-dirs", "move-face",
					"skip", "if", "loop", "repeat", "defun",
					"facing-p", "can-put-p", "can-pick-p",
					"can-move-p", "not"
				  }
	allSymbols := { "(" , ")", "=" } // Symbols and brackets, both single char and  multicharacter

	// TRANSLATION FOR ALL STRINGS IN KEYWORDS
	// Operators can be translated as themselves
	// translation.put("\n",'Φ')  only use this if \n is part of the language and is not skipped
	translation.put(":north", 'N')
	translation.put(":south", 'S')
	translation.put(":east", 'E')
	translation.put(":west", 'W')
	translation.put(":front", 'F')
	translation.put(":back", 'B')
	translation.put(":right", 'R')
	translation.put(":left", 'L')
	translation.put(":around", 'A')
	
	translation.put(":balloons", 'b')
	translation.put(":chips", 'c')

	translation.put("defvar", 'D')
	translation.put("=", '=')
	translation.put("move", 'M')
	translation.put("turn", 'T')
	translation.put("face" , 'f')
	translation.put("put", 'P')
	translation.put("pick", 'p')
	translation.put("move-dir", 'm')
	translation.put("run-dirs", 'd')
	translation.put("move-face", 'V')
	translation.put("skip", 's')
	
	translation.put("if", 'I')
	translation.put("loop", 'l')
	translation.put("repeat", 'r')
	translation.put("defun", 'f')
	
	translation.put("facing-p", 'i')
	translation.put("can-put-p", 'U')
	translation.put("can-pick-p", 'K')
	translation.put("can-move-p", 'O')
	translation.put("not", 'n')
	
	translation.put("IdL", 'v')
	translation.put("IdU", 'V')
	translation.put("Num", '#')
end

function createLexer(): ITransducer begin
	initialize()

	preOps := allPrefixes(allSymbols) 
	preKW := allPrefixes(keyWords) 
	
	StartOps := ( ∪ x | x ∈ allSymbols: { x.charAt(0) } )
	Symbols1 := ( ( ∪ x | x ∈ StartOps: { "" + x } ) ∩ allSymbols ) // \ {"\n"}  add this if \n  is a token 
	CharsSymbols1 := ( ∪ x | x ∈ Symbols1: { x.charAt(0) } )
	
	Out := CharsSymbols1 ∪ ( ∪ x | x ∈ translation.values(): { x } )

	print Out
	
	Ids := { "IdU", "IdL" }
	Q := { "INIT", "IdU", "Num", "Err", "IdL" } ∪ preKW ∪ preOps

	print Q
	
	Σ := alphaNum ∪ charsStrings(allSymbols) ∪ skipChars ∪ { ':', '-' }
	
	q₀ := "INIT"
	F := { "INIT" }
	
	return GDeterministicTransducer(Q, Σ, Out, q₀, F, δ, g, h)
end

function δ(state, σ) begin
	var q: String
	q := state

	if q = "Err" then
		return "Err"
	elseif q ∈ preOps then
		if q + σ in preOps then
			return q + σ
		elseif problems(q) then
			return "Err"
		elseif σ ∈ skipChars then
			return "INIT"
		elseif σ in('0'‥'9') then
			return "Num"
		elseif λ + σ in preKW then
			return λ + σ
		elseif σ in alphaUpper then
			return "IdU"
		elseif σ in alphaLower then
			return "IdL"
		elseif λ + σ in preOps then
			return λ + σ
		else
			return "Err"
		end
	elseif σ ∈ skipChars and q ∈ preKW and not ( q ∈ keyWords ) and q.charAt(0) = ':' then
		return "Err"
	elseif σ ∈ skipChars then
		return "INIT"
	elseif q = "INIT" and σ in ('0'‥'9') then
		return "Num"
	elseif q = "INIT" and λ + σ in preKW then
		return λ + σ
	elseif q = "INIT" and σ in alphaUpper then
		return "IdU"
	elseif q = "INIT" and σ in alphaLower then
		return "IdL"
	elseif q = "INIT" and λ + σ in preOps then
		return λ + σ
	elseif q ∈ preKW and ( q + σ ) in preKW then
		return q + σ
	elseif q ∈ preKW and σ in alphaNum and q.charAt(0) ∈ alphaUpper then
		return "IdU"
	elseif q ∈ preKW and σ in alphaNum and q.charAt(0) ∈ alphaLower then
		return "IdL"
	elseif q ∈ preKW and λ + σ in preOps then
		return λ + σ
	elseif q = "Num" and σ in ('0'‥'9') then
		return "Num"
	elseif q = "Num" and λ + σ in preOps then
		return λ + σ
	elseif q = "Num" and σ in alphaNum then
		return "Err"
	elseif q ∈ Ids and σ in alphaNum then
		return q
	elseif q ∈ Ids and λ + σ in preOps then
		return λ + σ
	else
		return "Err"
	end
end

function g(q) begin
	return λ
end

function h(q, σ) begin
	var s: String

	s := ( σ = '\n' ) ? "\\n" : ( λ + σ )

	if q ∈ preOps then
		if σ ∈ skipChars and q ∈ allSymbols then
			images.add(currentString)
			currentString := λ
			return translationGet(q)
		elseif q + σ in preOps then
			currentString := currentString + s
			return λ
		elseif σ ∈ ( StartOps ∪ alphaNum ) and q ∈ allSymbols then
			images.add(currentString)
			currentString := λ + s
			return translationGet(q)
		elseif σ ∈ ( StartOps ∪ alphaNum ∪ skipChars ) then
			currentString := λ + s
			return translationPreOps(q)
		else
			currentString := currentString + s
			return λ
		end

	elseif q ∉ { "Err" } and σ ∈ skipChars ∪ StartOps then
		if q = "INIT" then
			currentString := ( σ ∈ StartOps ) ? s : λ
			return λ
		elseif translationGet(q) = null then
			images.add(currentString)
			currentString := ( σ ∈ skipChars ∪ StartOps ) ? s : λ
			f = q.charAt(0)
			if f in alphaUpper then
				return translationGet("IdU")
			elseif f in alphaLower then
				return translationGet("IdL")
			else
				return null
			end
		else
			images.add(currentString)
			currentString := ( σ ∈ skipChars ∪ StartOps ) ? s : λ
			return translationGet(q)
		end
	else
		currentString := currentString + s
		return λ
	end
end

// Parser
function createParser(): IPushdownAutomaton begin
	Q := (0‥6)
	Σ := Out
	Γ := { 
			'1', 'D', '=', 'M', 'T', 'f', 'P', 
			'p', 'm', 'd', 'V', 's', 'c', 'I',
			'l', 'r', 'f', 'e', 'U', 'K', 'O', 
			'n', 'i'
		  }
	q₀ := 0
	F := { 0 }

	M := GPushdownAutomaton(Q, Σ, Γ, q₀, F)
	
	/// ## -- Commands -- ##
	// (defvar name n)
	M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'D' ).push("D")
	M.delta( 2, 3, 'V' ).push("D")
	M.delta( 2, 3, 'v' ).push("D")
	M.delta( 3, 4, '#' ).push("D")
	M.delta( 4, 0, ')' ).pop("1DDD")
	// (= name n)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, '=' ).push("=")
	M.delta( 2, 3, 'V' ).push("=")
	M.delta( 2, 3, 'v' ).push("=")
	M.delta( 3, 4, '#' ).push("=")
	M.delta( 4, 0, ')' ).pop("1===")
	// (move n)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'M' ).push("M")
	M.delta( 2, 4, '#' ).push("M")
	M.delta( 2, 4, 'V' ).push("M")
	M.delta( 2, 4, 'v' ).push("M")
	M.delta( 4, 0, ')' ).pop("1MM")
	// (turn D)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'T' ).push("T")
	M.delta( 2, 4, 'L' ).push("T")
	M.delta( 2, 4, 'R' ).push("T")
	M.delta( 2, 4, 'A' ).push("T")
	M.delta( 4, 0, ')' ).pop("1TT")
	// (face O)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 5, 'f' ).push("f")
	M.delta( 5, 4, 'N' ).push("f")
	M.delta( 5, 4, 'S' ).push("f")
	M.delta( 5, 4, 'E' ).push("f")
	M.delta( 5, 4, 'W' ).push("f")
	M.delta( 4, 0, ')' ).pop("1ff")
	// (put X n)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'P' ).push("P")
	M.delta( 2, 3, 'b' ).push("P")
	M.delta( 2, 3, 'c' ).push("P")
	M.delta( 3, 4, '#' ).push("P")
	M.delta( 3, 4, 'V' ).push("P")
	M.delta( 3, 4, 'v' ).push("P")
	M.delta( 4, 0, ')' ).pop("1PPP")
	// (pick X n)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'p' ).push("p")
	M.delta( 2, 3, 'b' ).push("p")
	M.delta( 2, 3, 'c' ).push("p")
	M.delta( 3, 4, '#' ).push("p")
	M.delta( 3, 4, 'V' ).push("p")
	M.delta( 3, 4, 'v' ).push("p")
	M.delta( 4, 0, ')' ).pop("1ppp")
	// (move-dir n D)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'm' ).push("m")
	M.delta( 2, 6, '#' ).push("m")
	M.delta( 2, 6, 'V' ).push("m")
	M.delta( 2, 6, 'v' ).push("m")
	M.delta( 6, 4, 'F' ).push("m")
	M.delta( 6, 4, 'R' ).push("m")
	M.delta( 6, 4, 'L' ).push("m")
	M.delta( 6, 4, 'B' ).push("m")
	M.delta( 4, 0, ')' ).pop("1mmm")
	// (run-dirs Ds)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'd' ).push("d")
	M.delta( 2, 2, 'F' ).ignore()
	M.delta( 2, 2, 'R' ).ignore()
	M.delta( 2, 2, 'L' ).ignore()
	M.delta( 2, 2, 'B' ).ignore()
	M.delta( 2, 0, ')' ).pop("1d")
	// (move-face n O)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 3, 'V' ).push("V")
	M.delta( 3, 5, '#' ).push("V")
	M.delta( 3, 5, 'V' ).push("V")
	M.delta( 3, 5, 'v' ).push("V")
	M.delta( 5, 4, 'N' ).push("V")
	M.delta( 5, 4, 'S' ).push("V")
	M.delta( 5, 4, 'W' ).push("V")
	M.delta( 5, 4, 'E' ).push("V")
	M.delta( 4, 0, ')' ).pop("1VVV")
	// (skip)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 4, 's' ).push("s")
	M.delta( 4, 0, ')' ).pop("1s")
	// (function-call (params)*)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 3, 'V' ).push("c")
	M.delta( 1, 3, 'v' ).push("c")
	M.delta( 3, 3, 'V' ).ignore()
	M.delta( 3, 3, 'v' ).ignore()
	M.delta( 3, 3, '#' ).ignore()
	M.delta( 3, 0, ')' ).pop("1c")
	
	/// ## -- Control Structures -- ##
	// (if condition Block1 Block2)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'I' ).push("I")
	⧐ A condition is called for changing state from 2 to 6
	⧐ List Block1
	M.delta( 6, 0, '(' ).push("II")
	M.delta( 0, 2, ')' ).pop("I")
	⧐ Single Block1
	M.delta( 6, 1, '(' ).push("I1I")
	M.delta( 4, 2, ')' ).pop("1IDDD")
	M.delta( 4, 2, ')' ).pop("1I===")
	M.delta( 4, 2, ')' ).pop("1IMM")
	M.delta( 4, 2, ')' ).pop("1ITT")
	M.delta( 4, 2, ')' ).pop("1Iff")
	M.delta( 4, 2, ')' ).pop("1IPPP")
	M.delta( 4, 2, ')' ).pop("1Ippp")
	M.delta( 4, 2, ')' ).pop("1Immm")
	M.delta( 2, 2, ')' ).pop("1Id")
	M.delta( 4, 2, ')' ).pop("1IVVV")
	M.delta( 4, 2, ')' ).pop("1Is")
	M.delta( 3, 2, ')' ).pop("1Ic")
	M.delta( 6, 4, '(' ).push("I1I")
	M.delta( 2, 2, ')' ).pop("1Iii")
	M.delta( 2, 2, ')' ).pop("1IUUU")
	M.delta( 2, 2, ')' ).pop("1IKKK")
	M.delta( 2, 2, ')' ).pop("1IOO")
	M.delta( 6, 1, '(' ).push("I1I")
	M.delta( 3, 2, ')' ).pop("1Ifc")
	M.delta( 6, 5, '(' ).push("I1I")
	M.delta( 6, 2, ')' ).pop("1In")
	⧐ List Block2
	M.delta( 2, 0, '(' ).push("II")
	M.delta( 2, 4, ')' ).pop("I")
	⧐ Single Block2
	M.delta( 2, 1, '(' ).push("I1I")
	M.delta( 4, 4, ')' ).pop("1IDDD")
	M.delta( 4, 4, ')' ).pop("1I===")
	M.delta( 4, 4, ')' ).pop("1IMM")
	M.delta( 4, 4, ')' ).pop("1ITT")
	M.delta( 4, 4, ')' ).pop("1Iff")
	M.delta( 4, 4, ')' ).pop("1IPPP")
	M.delta( 4, 4, ')' ).pop("1Ippp")
	M.delta( 4, 4, ')' ).pop("1Immm")
	M.delta( 2, 4, ')' ).pop("1Id")
	M.delta( 4, 4, ')' ).pop("1IVVV")
	M.delta( 4, 4, ')' ).pop("1Is")
	M.delta( 3, 4, ')' ).pop("1Ic")
	M.delta( 2, 4, '(' ).push("I1I")
	M.delta( 2, 4, ')' ).pop("1Iii")
	M.delta( 2, 4, ')' ).pop("1IUUU")
	M.delta( 2, 4, ')' ).pop("1IKKK")
	M.delta( 2, 4, ')' ).pop("1IOO")
	M.delta( 2, 1, '(' ).push("I1I")
	M.delta( 3, 4, ')' ).pop("1Ifc")
	M.delta( 2, 5, '(' ).push("I1I")
	M.delta( 6, 4, ')' ).pop("1In")
	⧐ End of structure
	M.delta( 4, 0, ')' ).pop("1III")
	// (loop condition Block)
	M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'l' ).push("l")
	⧐ A condition is called for changing state from 2 to 6
	⧐ List Block
	M.delta( 6, 0, '(' ).push("ll")
	M.delta( 0, 2, ')' ).pop("l")
	⧐ Single Block
	M.delta( 6, 1, '(' ).push("l1l")
	M.delta( 4, 2, ')' ).pop("1lDDD")
	M.delta( 4, 2, ')' ).pop("1l===")
	M.delta( 4, 2, ')' ).pop("1lMM")
	M.delta( 4, 2, ')' ).pop("1lTT")
	M.delta( 4, 2, ')' ).pop("1lff")
	M.delta( 4, 2, ')' ).pop("1lPPP")
	M.delta( 4, 2, ')' ).pop("1lppp")
	M.delta( 4, 2, ')' ).pop("1lmmm")
	M.delta( 2, 2, ')' ).pop("1ld")
	M.delta( 4, 2, ')' ).pop("1lVVV")
	M.delta( 4, 2, ')' ).pop("1ls")
	M.delta( 3, 2, ')' ).pop("1lc")
	M.delta( 6, 4, '(' ).push("l1l")
	M.delta( 2, 2, ')' ).pop("1lii")
	M.delta( 2, 2, ')' ).pop("1lUUU")
	M.delta( 2, 2, ')' ).pop("1lKKK")
	M.delta( 2, 2, ')' ).pop("1lOO")
	M.delta( 6, 1, '(' ).push("l1l")
	M.delta( 3, 2, ')' ).pop("1lfc")
	M.delta( 6, 5, '(' ).push("l1l")
	M.delta( 6, 2, ')' ).pop("1ln")
	⧐ End of structure
	M.delta( 2, 0, ')' ).pop("1ll")
	// (repeat n Block)
	M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'r' ).push("r")
	M.delta( 2, 6, '#' ).push("r")
	M.delta( 2, 6, 'V' ).push("r")
	M.delta( 2, 6, 'v' ).push("r")
	⧐ List Block
	M.delta( 6, 0, '(' ).push("rr")
	M.delta( 0, 2, ')' ).pop("r")
	⧐ Single Block
	M.delta( 6, 1, '(' ).push("r1r")
	M.delta( 4, 2, ')' ).pop("1rDDD")
	M.delta( 4, 2, ')' ).pop("1r===")
	M.delta( 4, 2, ')' ).pop("1rMM")
	M.delta( 4, 2, ')' ).pop("1rTT")
	M.delta( 4, 2, ')' ).pop("1rff")
	M.delta( 4, 2, ')' ).pop("1rPPP")
	M.delta( 4, 2, ')' ).pop("1rppp")
	M.delta( 4, 2, ')' ).pop("1rmmm")
	M.delta( 2, 2, ')' ).pop("1rd")
	M.delta( 4, 2, ')' ).pop("1rVVV")
	M.delta( 4, 2, ')' ).pop("1rs")
	M.delta( 3, 2, ')' ).pop("1rc")
	M.delta( 6, 4, '(' ).push("r1r")
	M.delta( 2, 2, ')' ).pop("1rii")
	M.delta( 2, 2, ')' ).pop("1rUUU")
	M.delta( 2, 2, ')' ).pop("1rKKK")
	M.delta( 2, 2, ')' ).pop("1rOO")
	M.delta( 6, 1, '(' ).push("r1r")
	M.delta( 3, 2, ')' ).pop("1rfc")
	M.delta( 6, 5, '(' ).push("r1r")
	M.delta( 6, 2, ')' ).pop("1rn")
	⧐ End of structure
	M.delta( 2, 0, ')' ).pop("1rrr")
	// (defun name (Params)Block)
	⧐ M.delta( 0, 1, '(' ).push("1")
	M.delta( 1, 2, 'f' ).push("f")
	M.delta( 2, 3, 'V' ).push("f")
	M.delta( 2, 3, 'v' ).push("f")
	M.delta( 3, 3, "(" ).push("ff")
	M.delta( 3, 3, 'V' ).ignore()
	M.delta( 3, 3, 'v' ).ignore()
	M.delta( 3, 6, ')' ).pop("f")
	⧐ Block
	M.delta( 6, 0, '(' ).push("ff")
	M.delta( 0, 2, ')' ).pop("f")
	⧐ Single Block
	M.delta( 6, 1, '(' ).push("f1f")
	M.delta( 4, 2, ')' ).pop("1fDDD")
	M.delta( 4, 2, ')' ).pop("1f===")
	M.delta( 4, 2, ')' ).pop("1fMM")
	M.delta( 4, 2, ')' ).pop("1fTT")
	M.delta( 4, 2, ')' ).pop("1fff")
	M.delta( 4, 2, ')' ).pop("1fPPP")
	M.delta( 4, 2, ')' ).pop("1fppp")
	M.delta( 4, 2, ')' ).pop("1fmmm")
	M.delta( 2, 2, ')' ).pop("1fd")
	M.delta( 4, 2, ')' ).pop("1fVVV")
	M.delta( 4, 2, ')' ).pop("1fs")
	M.delta( 3, 2, ')' ).pop("1fc")
	M.delta( 6, 4, '(' ).push("f1f")
	M.delta( 2, 2, ')' ).pop("1fii")
	M.delta( 2, 2, ')' ).pop("1fUUU")
	M.delta( 2, 2, ')' ).pop("1fKKK")
	M.delta( 2, 2, ')' ).pop("1fOO")
	M.delta( 6, 1, '(' ).push("f1f")
	M.delta( 3, 2, ')' ).pop("1ffc")
	M.delta( 6, 5, '(' ).push("f1f")
	M.delta( 6, 2, ')' ).pop("1fn")
	⧐ End of structure
	M.delta( 2, 0, ')' ).pop("1ffff")
	
	/// ## -- Conditions -- ##
	// (facing-p O)
	M.delta( 2, 4, '(' ).push("1")
	M.delta( 4, 5, 'i' ).push("i")
	M.delta( 5, 2, 'N' ).push("i")
	M.delta( 5, 2, 'S' ).push("i")
	M.delta( 5, 2, 'E' ).push("i")
	M.delta( 5, 2, 'W' ).push("i")
	M.delta( 2, 6, ')' ).pop("1ii")
	// (can-put-p X n)
	M.delta( 2, 4, '(' ).push("1")
	M.delta( 4, 5, 'U' ).push("U")
	M.delta( 5, 3, 'c' ).push("U")
	M.delta( 5, 3, 'b' ).push("U")
	M.delta( 3, 2, '#' ).push("U")
	M.delta( 3, 2, 'V' ).push("U")
	M.delta( 3, 2, 'v' ).push("U")
	M.delta( 2, 6, ')' ).pop("1UUU")
	// (can-pick-p X n)
	M.delta( 2, 4, '(' ).push("1")
	M.delta( 4, 5, 'K' ).push("K")
	M.delta( 5, 3, 'c' ).push("K")
	M.delta( 5, 3, 'b' ).push("K")
	M.delta( 3, 2, '#' ).push("K")
	M.delta( 3, 2, 'V' ).push("K")
	M.delta( 3, 2, 'v' ).push("K")
	M.delta( 2, 6, ')' ).pop("1KKK")
	// (can-move-p D)
	M.delta( 2, 4, '(' ).push("1")
	M.delta( 4, 5, 'O' ).push("O")
	M.delta( 5, 2, 'N' ).push("O")
	M.delta( 5, 2, 'S' ).push("O")
	M.delta( 5, 2, 'E' ).push("O")
	M.delta( 5, 2, 'W' ).push("O")
	M.delta( 2, 6, ')' ).pop("1OO")
	// (function-call (params)*) as a condition
	M.delta( 2, 1, '(' ).push("1")
	M.delta( 1, 3, 'V' ).push("fc")
	M.delta( 1, 3, 'v' ).push("fc")
	M.delta( 3, 3, 'V' ).ignore()
	M.delta( 3, 3, 'v' ).ignore()
	M.delta( 3, 3, '#' ).ignore()
	M.delta( 3, 6, ')' ).pop("1fc")
	// (not cond)
	M.delta( 2, 5, '(' ).push("1")
	M.delta( 5, 2, 'n' ).push("n")
	⧐ A condition is called for changing state from 2 to 6
	M.delta( 6, 6, ')' ).pop("1n")
	
	/// ## -- Others -- ##
	// Allow to group commands
	M.delta( 0, 0, '(' ).push("1")
	M.delta( 0, 0, ')' ).pop("1")

	return M
end

procedure testLexerParser(M: ITransducer, P: IPushdownAutomaton) begin
	var sc: java.util.Scanner(System.$in)
	var string: String
	inputA = elements(M.getInputAlphabet())
	input = ""

	print "----------------------------"
	print "Enter one or more lines. End with a single line with $"
	print "If you want to stop testing, enter EXIT" 
	string := sc.nextLine()

	while string != "EXIT" do
		string := string + "  \n " 
		input := ""
		while string.charAt(0) != '$' do
			input := input + string
			string := sc.nextLine() + " \n "
		end

		if chars(input) ⊆ inputA then
			currentString := λ
			images := GArrayList()
			result := M.acceptsString(input)
			tokenStream := M.getOutputString()

			print "The input was " + ( result ? "" : "not " ) + " accepted by the lexer."
			if result then
				print "Token Stream:  " + tokenStream
				print "Strings: " + images 
				result := P.acceptsString(tokenStream)
				print "Parser result: " + ( result ? "accepted " : "rejected " )
			else
				print "Partial token Stream " + tokenStream
			end
		else
			print "Input contains invalid characters: " + (chars(input) \ inputA)
		end
		print "----------------------------"

		print "Enter one or more lines. End with a single line with $"
		print "If you want to stop testing, enter EXIT" 
		string := sc.nextLine()
	end
	print "Good bye"
	print ""
end 
