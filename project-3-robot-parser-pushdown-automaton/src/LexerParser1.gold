 //GAutomataFrame.show(Parser2)
   using gold.structures.automaton.*
using gold.visualization.automaton.*


	//  (lexer and parser) for the following language:
	//  E ->   num
	//  E ->    vari
	//  E ->  (plus L)
	//  E ->  (times L)  
	//  L ->  E
	//  L ->  L E
	//    Tokens:
	//    num  ::=  (digit)+
	//    var  ::=   (letter)(digit | letter)*
	
	  
	
	
	
	
	
	
procedure main(args:String[]) begin
    Lexer = createTransducer()
	Parser2 = createAutomaton2()
	Parser = createAutomaton()
   stdin= java.util.Scanner(System.$in)
   print "Do you want to use the parser that implements the grammar directly (1 for YES)"
  var mode:String
  mode := stdin.nextLine()


  // GAutomataFrame.show(Lexer)
   
  
  if mode.charAt(0) ='1' then   
      
   //  GAutomataFrame.show(Parser)
     testParser(Lexer,Parser)
   
   else 
    
    // 	GAutomataFrame.show(Parser2)
    
     testParser(Lexer,Parser2)
    end  
    end
    
      
    

procedure testParser(M:ITransducer,P:IPushdownAutomaton) begin
	// M es el  analizador léxico
	// P es el  analizador sintáctico
	var sc:java.util.Scanner(System.$in)
    	
		
		
		print "----------------------------"
		print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 



	while string != "EXIT" do
	    
	    
	    input = ""
		
		
       
       while string  != "$" do
              input := input + string + " "
              string:=sc.nextLine()
       end
       
       result:=M.acceptsString(input)    
		tokenStream := M.getOutputString()
		
		print "The lexer did "+(result?"":"not ")+" accept the string."
		if result then 
			
               print "Token Stream: "+ tokenStream 
               result:=P.acceptsString(tokenStream )
         		 print "Parser result: "+(result?"accepted ":"rejected ")
		
               
               
       end		

       print "----------------------------"
	
	   print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 

	end
print  "Good bye"
print  ""
end

 
function createAutomaton():IPushdownAutomaton begin
	// This automaton implements the grammar
	//
	//  E -> n
	//  E ->  v
	//  E ->  (+L)
	//  E ->  (*L)
	//  L ->  E
	//  L ->  L E
	
	
	Terms := {'(',')','+','*','v','n'}
	NonTerms := {'E','L'}
	Q:={"I","q","F"}
	Σ:=Terms
	Γ:=Terms ∪ NonTerms ∪ { '$'} 
	q₀:="I"
	F:={"F"}
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	
	M.delta("I","q","").push("$E")
	M.delta("q","F","").pop("$")
	
	for each x in {'(',')','+','*','v','n'} do
	  M.delta("q","q",""+x).pop(""+x)
	end
	M.delta("q","q","").changeTop("E","v")
	M.delta("q","q","").changeTop("E","n")
	M.delta("q","q","").changeTop("E",")L+(")
	M.delta("q","q","").changeTop("E",")L*(")
	M.delta("q","q","").changeTop("L","E")
	M.delta("q","q","").changeTop("L","EL")
return M
end

function createAutomaton2():IPushdownAutomaton begin
	
	//  We define an automaton that keeps track of open parenthesis
	//  Two states:  I and F
	//     I is the initial state
	//    F:  final state
	//     In I: read   (+ or  (*  , push 1, stay in 
	//        reading n or v : switch states
	//     In F: reading ) pop 1
    //   Switch to I if there's a 1 on the stack not reading anything
		
	
	
	Terms := {'(',')','+','*','v','n'}
	NonTerms := {'E','L'}
	Q:={"I","F"}
	Σ:={'(',')','+','*','v','n'}
	Γ:={'1'}
	q₀:="I"
	F:={"F"}
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	
	M.delta("I","I","(+").push("1")
	M.delta("I","I","(*").push("1")
	M.delta("I","F","v").ignore()
	M.delta("I","F","n").ignore()
	M.delta("F","F",")").pop("1")
	M.delta("F","I","").$skip("1")


return M
end

  
function createTransducer():ITransducer begin
	// Lexer: 
	// reads lower case letters,  digits, parenthesis and spaces.
	// outputs a stream of v's n's, +'s,  *'s and  and parenthesis
	
	Q:= {"I","Id", "p", "pl" ,"plu", "plus", "t", "ti" ,"tim", "time", "times", "Num","Err"}
	
	Σ:=('0'‥'9') ∪ ('a' ‥ 'z') ∪ {'(',')',' '} 
	Out:={'(',')','+','*','v','n'} 
	q₀:="I"
	F:= {"I"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if (q = "Err") then return "Err"
	elseif  σ ∈ {'(',')',' '} then return "I"	
    elseif q="I" and σ='p' then return "p"
	elseif q="I" and σ='t' then return "t"
	elseif q="I" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif	q="Num" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif	q="Num" and σ ∈ ('a' ‥ 'z') then return "Err"
	elseif q="p" and σ='l' then return "pl" 
    elseif q="pl" and σ='u' then return "plu" 
    elseif q="plu" and σ='s' then return "plus" 
	elseif q="t" and σ='i' then return "ti" 
    elseif q="ti" and σ='m' then return "tim" 
    elseif q="tim" and σ='e' then return "time" 
    elseif q="time" and σ='s' then return "times" 
    else  return "Id"
    end	
end 



function g(q) begin
	return λ
end

function h(q,σ) begin
var s: String
s := λ

if q ∉ {"Err"} and σ ∈ {'(',')',' '} then
 
		if σ ∉ {' '} then  s=String.valueOf(σ) end

      if q=="I" then return s
      elseif q=="plus" then return "+"+s 
      elseif q=="times" then return "*"+s
      elseif q=="Num" then return "n"+s
      else return "v"+s
      end
else return  λ

end
end