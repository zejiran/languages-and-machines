// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/LexerParserRobot202210.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class LexerParserRobot202210 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static String currentString=null;
  static {
    int $line=0;
    $line=12;
    $try:try {
      currentString=$defaultValue(String.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static GArrayList images=null;
  static {
    int $line=0;
    $line=13;
    $try:try {
      images=$invokeConstructor(GArrayList.class,new Object[]{});
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet allSymbols=null;
  static {
    int $line=0;
    $line=15;
    $try:try {
      allSymbols=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet keyWords=null;
  static {
    int $line=0;
    $line=16;
    $try:try {
      keyWords=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet skipChars=null;
  static {
    int $line=0;
    $line=17;
    $try:try {
      skipChars=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet preKW=null;
  static {
    int $line=0;
    $line=19;
    $try:try {
      preKW=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet preOps=null;
  static {
    int $line=0;
    $line=20;
    $try:try {
      preOps=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet StartOps=null;
  static {
    int $line=0;
    $line=22;
    $try:try {
      StartOps=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet Symbols1=null;
  static {
    int $line=0;
    $line=23;
    $try:try {
      Symbols1=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet CharsSymbols1=null;
  static {
    int $line=0;
    $line=25;
    $try:try {
      CharsSymbols1=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet alphaUpper=null;
  static {
    int $line=0;
    $line=27;
    $try:try {
      alphaUpper=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet alphaLower=null;
  static {
    int $line=0;
    $line=28;
    $try:try {
      alphaLower=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet digits=null;
  static {
    int $line=0;
    $line=29;
    $try:try {
      digits=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet alphaNum=null;
  static {
    int $line=0;
    $line=31;
    $try:try {
      alphaNum=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet Out=null;
  static {
    int $line=0;
    $line=33;
    $try:try {
      Out=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static Boolean diffIdents=null;
  static {
    int $line=0;
    $line=34;
    $try:try {
      diffIdents=$defaultValue(Boolean.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static ISet Ids=null;
  static {
    int $line=0;
    $line=36;
    $try:try {
      Ids=$defaultValue(ISet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static GHashTableMap translation=null;
  static {
    int $line=0;
    $line=37;
    $try:try {
      translation=$invokeConstructor(GHashTableMap.class,new Object[]{});
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,null,$line);
    }
  }
  public static Object chars(Object string) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      int $v3=$int(0);
      int $v4=$int($invokeMethod("length",string,new Object[]{}))-1;
      $v2:for (int i=$v3; i<=$v4; i++) {
        $v1.add($invokeMethod("charAt",string,new Object[]{i}));
      }
      $result=$v1;
      if (true) break $try;
      $line=38;
      $rethrow(new RuntimeException("The function \"chars(string:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"chars",$line);
    }
    return $result;
  }
  public static Object charsStrings(Object strings) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v5=$newSet(GCollections.emptySet());
      $v6:for (Object s:GCollections.unmodifiableCollection(strings)) {
        $v5.union(GCollections.unmodifiableSet(((java.lang.Iterable)(LexerParserRobot202210.chars(s)))));
      }
      $result=$v5;
      if (true) break $try;
      $line=39;
      $rethrow(new RuntimeException("The function \"charsStrings(strings:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"charsStrings",$line);
    }
    return $result;
  }
  public static Object elements(Object array) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v7=$newSet();
      int $v9=$int(0);
      int $v10=$int($opAbsolY(array))-1;
      $v8:for (int i=$v9; i<=$v10; i++) {
        $v7.add($getArrayValue(array,new Object[]{i}));
      }
      $result=$v7;
      if (true) break $try;
      $line=40;
      $rethrow(new RuntimeException("The function \"elements(array:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"elements",$line);
    }
    return $result;
  }
  public static Object prefixes(Object string) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v11=$newSet();
      int $v13=$int(1);
      int $v14=$int($invokeMethod("length",string,new Object[]{}));
      $v12:for (int i=$v13; i<=$v14; i++) {
        $v11.add($invokeMethod("substring",string,new Object[]{0,i}));
      }
      $result=$v11;
      if (true) break $try;
      $line=41;
      $rethrow(new RuntimeException("The function \"prefixes(string:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"prefixes",$line);
    }
    return $result;
  }
  public static Object splits(Object string) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v15=$newSet();
      int $v17=$int(1);
      int $v18=$int($opSubtrY($invokeMethod("length",string,new Object[]{}),1));
      $v16:for (int i=$v17; i<=$v18; i++) {
        $v15.add(GCollections.asList($invokeMethod("substring",string,new Object[]{0,i}),$invokeMethod("substring",string,new Object[]{i,$invokeMethod("length",string,new Object[]{})})));
      }
      $result=$v15;
      if (true) break $try;
      $line=42;
      $rethrow(new RuntimeException("The function \"splits(string:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"splits",$line);
    }
    return $result;
  }
  public static Object allPrefixes(Object strings) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v19=$newSet(GCollections.emptySet());
      $v20:for (Object s:GCollections.unmodifiableCollection(strings)) {
        $v19.union(GCollections.unmodifiableSet(((java.lang.Iterable)(LexerParserRobot202210.prefixes(s)))));
      }
      $result=$v19;
      if (true) break $try;
      $line=43;
      $rethrow(new RuntimeException("The function \"allPrefixes(strings:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"allPrefixes",$line);
    }
    return $result;
  }
  public static Object translationGet(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result=(($bool((($opEqualY($opAbsolY(q),1)&&$opMembrY(q,Symbols1))&&!$opEqualY(q,'\n'))))?(q):(((gold.structures.map.GHashTableMap)translation).get(q)));
      if (true) break $try;
      $line=44;
      $rethrow(new RuntimeException("The function \"translationGet(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"translationGet",$line);
    }
    return $result;
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=47;
      currentString=$cast(String.class,$fix(""));
      $line=48;
      Object lexer=$fix(LexerParserRobot202210.createLexer());
      $line=49;
      Object parser=$fix(LexerParserRobot202210.createParser());
      $line=51;
      LexerParserRobot202210.testLexer($cast(gold.structures.automaton.ITransducer.class,lexer));
      $line=53;
      LexerParserRobot202210.testLexerParser($cast(gold.structures.automaton.ITransducer.class,lexer),$cast(gold.structures.automaton.IPushdownAutomaton.class,parser));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"main",$line);
    }
  }
  public static Object testLexer(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=57;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=58;
      String string=null;
      string=$defaultValue(String.class);
      $line=59;
      Object inputA=$fix(LexerParserRobot202210.elements(((gold.structures.automaton.ITransducer)M).getInputAlphabet()));
      $line=60;
      Object input=$fix("");
      $line=62;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=63;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=64;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=65;
      string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      $line=67;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=68;
        string=$cast(String.class,$fix($opAdditY(string," \n ")));
        $line=69;
        input=$fix("");
        $line=70;
        while (true) {
          if (!(!$opEqualY(((java.lang.String)string).charAt($int(0)),'$'))) break;
          $line=71;
          input=$fix($opAdditY(input,string));
          $line=72;
          string=$cast(String.class,$fix($opAdditY(((java.util.Scanner)sc).nextLine()," \n  ")));
        }
        $line=75;
        if ($opSbsetY(LexerParserRobot202210.chars(input),inputA)) {
          $line=76;
          currentString=$cast(String.class,$fix(""));
          $line=77;
          images=$cast(GArrayList.class,$fix($invokeConstructor(GArrayList.class,new Object[]{})));
          $line=78;
          Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,input)));
          $line=79;
          Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
          $line=81;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The input was ",(($bool(result))?(""):("not ")))," accepted by the lexer.")}));
          $line=82;
          if ($bool(result)) {
            $line=83;
            System.out.println($message(new Object[]{$opAdditY("Token Stream:  ",tokenStream)}));
            $line=84;
            System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
          }
          else {
            $line=86;
            System.out.println($message(new Object[]{$opAdditY("Partial token Stream ",tokenStream)}));
          }
        }
        else {
          $line=89;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid characters: ",$opDiffeY(LexerParserRobot202210.chars(input),inputA))}));
        }
        $line=91;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=93;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=94;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=95;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      }
      $line=97;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=98;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"testLexer",$line);
    }
    return $result;
  }
  public static Object problems(String q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=103;
      if ($opMembrY(q,allSymbols)) {
        $line=104;
        $result=false;
        if (true) break $try;
      }
      else {
        $line=105;
        if ($opLessqY($opAbsolY(q),1)) {
          $line=106;
          $result=true;
          if (true) break $try;
        }
        else {
          $line=108;
          for (Object $v21:GCollections.unmodifiableCollection(LexerParserRobot202210.splits(q))) {
            java.util.Iterator $v22=GCollections.unmodifiableCollection($v21).iterator();
            Object s=$v22.next();
            Object t=$v22.next();
            $line=109;
            if ((!$bool(LexerParserRobot202210.problems($cast(java.lang.String.class,s)))&&!$bool(LexerParserRobot202210.problems($cast(java.lang.String.class,t))))) {
              $line=110;
              $result=false;
              if (true) break $try;
            }
          }
          $line=113;
          $result=true;
          if (true) break $try;
        }
      }
      $line=115;
      $rethrow(new RuntimeException("The function \"problems(q:String)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"problems",$line);
    }
    return $result;
  }
  public static Object translationPreOps(Object state) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=118;
      Object x=null;
      Object y=null;
      $line=119;
      String q=null;
      q=$defaultValue(String.class);
      $line=120;
      q=$cast(String.class,$fix(state));
      $line=121;
      Object n=$fix(((java.lang.String)q).length());
      $line=122;
      if ($opEqualY(n,0)) {
        $line=123;
        $result="";
        if (true) break $try;
      }
      else {
        $line=124;
        if ($opMembrY(q,allSymbols)) {
          $line=125;
          ((gold.structures.list.GArrayList)images).add(q);
          $line=126;
          $result=LexerParserRobot202210.translationGet(q);
          if (true) break $try;
        }
        else {
          $line=127;
          if ($opEqualY(n,1)) {
            $line=128;
            $result="";
            if (true) break $try;
          }
          else {
            $line=130;
            for (Object $v23:GCollections.unmodifiableCollection(LexerParserRobot202210.splits(q))) {
              java.util.Iterator $v24=GCollections.unmodifiableCollection($v23).iterator();
              Object s=$v24.next();
              Object t=$v24.next();
              $line=131;
              x=$fix(LexerParserRobot202210.translationPreOps(s));
              $line=132;
              y=$fix(LexerParserRobot202210.translationPreOps(t));
              $line=133;
              if ((!$opEqualY(x,"")&&!$opEqualY(y,""))) {
                $line=134;
                $result=$opAdditY(x,y);
                if (true) break $try;
              }
            }
            $line=137;
            $result="";
            if (true) break $try;
          }
        }
      }
      $line=139;
      $rethrow(new RuntimeException("The function \"translationPreOps(state:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"translationPreOps",$line);
    }
    return $result;
  }
  public static Object initialize() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=142;
      skipChars=$cast(ISet.class,$fix(GCollections.asSet(' ','\t','\n')));
      $line=143;
      alphaUpper=$cast(ISet.class,$fix($opIntvlY('A','Z')));
      $line=144;
      alphaLower=$cast(ISet.class,$fix($opIntvlY('a','z')));
      $line=145;
      digits=$cast(ISet.class,$fix($opIntvlY('0','9')));
      $line=146;
      alphaNum=$cast(ISet.class,$fix($opUnionY($opUnionY($opUnionY(alphaUpper,alphaLower),digits),GCollections.asSet('-'))));
      $line=147;
      keyWords=$cast(ISet.class,$fix(GCollections.asSet(":left",":north","move","move-dir","face")));
      $line=148;
      allSymbols=$cast(ISet.class,$fix(GCollections.asSet("(",")")));
      $line=153;
      ((gold.structures.map.GHashTableMap)translation).put(":north",'N');
      $line=154;
      ((gold.structures.map.GHashTableMap)translation).put(":south",'S');
      $line=155;
      ((gold.structures.map.GHashTableMap)translation).put(":east",'E');
      $line=156;
      ((gold.structures.map.GHashTableMap)translation).put(":west",'W');
      $line=157;
      ((gold.structures.map.GHashTableMap)translation).put(":front",'F');
      $line=158;
      ((gold.structures.map.GHashTableMap)translation).put(":back",'B');
      $line=159;
      ((gold.structures.map.GHashTableMap)translation).put(":right",'R');
      $line=160;
      ((gold.structures.map.GHashTableMap)translation).put(":left",'L');
      $line=162;
      ((gold.structures.map.GHashTableMap)translation).put(":ballons",'b');
      $line=163;
      ((gold.structures.map.GHashTableMap)translation).put(":chips",'c');
      $line=165;
      ((gold.structures.map.GHashTableMap)translation).put("defvar",'D');
      $line=166;
      ((gold.structures.map.GHashTableMap)translation).put("=",'=');
      $line=167;
      ((gold.structures.map.GHashTableMap)translation).put("move",'M');
      $line=168;
      ((gold.structures.map.GHashTableMap)translation).put("turn",'T');
      $line=169;
      ((gold.structures.map.GHashTableMap)translation).put("face",'f');
      $line=170;
      ((gold.structures.map.GHashTableMap)translation).put("put",'P');
      $line=171;
      ((gold.structures.map.GHashTableMap)translation).put("pick",'p');
      $line=172;
      ((gold.structures.map.GHashTableMap)translation).put("move-dir",'m');
      $line=173;
      ((gold.structures.map.GHashTableMap)translation).put("run-dirs",'d');
      $line=174;
      ((gold.structures.map.GHashTableMap)translation).put("move-face",'V');
      $line=175;
      ((gold.structures.map.GHashTableMap)translation).put("skip",'s');
      $line=177;
      ((gold.structures.map.GHashTableMap)translation).put("if",'I');
      $line=178;
      ((gold.structures.map.GHashTableMap)translation).put("loop",'l');
      $line=179;
      ((gold.structures.map.GHashTableMap)translation).put("repeat",'r');
      $line=180;
      ((gold.structures.map.GHashTableMap)translation).put("defun",'f');
      $line=182;
      ((gold.structures.map.GHashTableMap)translation).put("facing-p",'I');
      $line=183;
      ((gold.structures.map.GHashTableMap)translation).put("can-put-p",'U');
      $line=184;
      ((gold.structures.map.GHashTableMap)translation).put("can-pick-p",'K');
      $line=185;
      ((gold.structures.map.GHashTableMap)translation).put("can-move-p",'O');
      $line=186;
      ((gold.structures.map.GHashTableMap)translation).put("not",'n');
      $line=188;
      ((gold.structures.map.GHashTableMap)translation).put("IdL",'v');
      $line=189;
      ((gold.structures.map.GHashTableMap)translation).put("IdU",'V');
      $line=190;
      ((gold.structures.map.GHashTableMap)translation).put("Num",'#');
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"initialize",$line);
    }
    return $result;
  }
  public static ITransducer createLexer() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=194;
      LexerParserRobot202210.initialize();
      $line=196;
      preOps=$cast(ISet.class,$fix(LexerParserRobot202210.allPrefixes(allSymbols)));
      $line=197;
      preKW=$cast(ISet.class,$fix(LexerParserRobot202210.allPrefixes(keyWords)));
      $line=199;
      gold.structures.set.ISet $v25=$newSet(GCollections.emptySet());
      $v26:for (Object x:GCollections.unmodifiableCollection(allSymbols)) {
        $v25.union(GCollections.unmodifiableSet(((java.lang.Iterable)(GCollections.asSet($invokeMethod("charAt",x,new Object[]{0}))))));
      }
      StartOps=$cast(ISet.class,$fix($v25));
      $line=200;
      gold.structures.set.ISet $v27=$newSet(GCollections.emptySet());
      $v28:for (Object x:GCollections.unmodifiableCollection(StartOps)) {
        $v27.union(GCollections.unmodifiableSet(((java.lang.Iterable)(GCollections.asSet($opAdditY("",x))))));
      }
      Symbols1=$cast(ISet.class,$fix($opInterY($v27,allSymbols)));
      $line=201;
      gold.structures.set.ISet $v29=$newSet(GCollections.emptySet());
      $v30:for (Object x:GCollections.unmodifiableCollection(Symbols1)) {
        $v29.union(GCollections.unmodifiableSet(((java.lang.Iterable)(GCollections.asSet($invokeMethod("charAt",x,new Object[]{0}))))));
      }
      CharsSymbols1=$cast(ISet.class,$fix($v29));
      $line=203;
      gold.structures.set.ISet $v31=$newSet(GCollections.emptySet());
      $v32:for (Object x:GCollections.unmodifiableCollection(((gold.structures.map.GHashTableMap)translation).values())) {
        $v31.union(GCollections.unmodifiableSet(((java.lang.Iterable)(GCollections.asSet(x)))));
      }
      Out=$cast(ISet.class,$fix($opUnionY(CharsSymbols1,$v31)));
      $line=205;
      System.out.println($message(new Object[]{Out}));
      $line=207;
      Ids=$cast(ISet.class,$fix(GCollections.asSet("IdU","IdL")));
      $line=208;
      Object Q=$fix($opUnionY($opUnionY(GCollections.asSet("INIT","IdU","Num","Err","IdL"),preKW),preOps));
      $line=210;
      System.out.println($message(new Object[]{Q}));
      $line=212;
      Object \u03A3=$fix($opUnionY($opUnionY($opUnionY(alphaNum,LexerParserRobot202210.charsStrings(allSymbols)),skipChars),GCollections.asSet(':','-')));
      $line=214;
      Object q_0=$fix("INIT");
      $line=215;
      Object F=$fix(GCollections.asSet("INIT"));
      $line=217;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(LexerParserRobot202210.class,"\u03B4"),new GMethod(LexerParserRobot202210.class,"g"),new GMethod(LexerParserRobot202210.class,"h")});
      if (true) break $try;
      $line=218;
      $rethrow(new RuntimeException("The function \"createLexer()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"createLexer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object state, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=221;
      String q=null;
      q=$defaultValue(String.class);
      $line=222;
      q=$cast(String.class,$fix(state));
      $line=224;
      if ($opEqualY(q,"Err")) {
        $line=225;
        $result="Err";
        if (true) break $try;
      }
      else {
        $line=226;
        if ($opMembrY(q,preOps)) {
          $line=227;
          if ($opMembrY($opAdditY(q,\u03C3),preOps)) {
            $line=228;
            $result=$opAdditY(q,\u03C3);
            if (true) break $try;
          }
          else {
            $line=229;
            if ($bool(LexerParserRobot202210.problems($cast(java.lang.String.class,q)))) {
              $line=230;
              $result="Err";
              if (true) break $try;
            }
            else {
              $line=231;
              if ($opMembrY(\u03C3,skipChars)) {
                $line=232;
                $result="INIT";
                if (true) break $try;
              }
              else {
                $line=233;
                if ($opMembrY(\u03C3,$opIntvlY('0','9'))) {
                  $line=234;
                  $result="Num";
                  if (true) break $try;
                }
                else {
                  $line=235;
                  if ($opMembrY($opAdditY("",\u03C3),preKW)) {
                    $line=236;
                    $result=$opAdditY("",\u03C3);
                    if (true) break $try;
                  }
                  else {
                    $line=237;
                    if ($opMembrY(\u03C3,alphaUpper)) {
                      $line=238;
                      $result="IdU";
                      if (true) break $try;
                    }
                    else {
                      $line=239;
                      if ($opMembrY(\u03C3,alphaLower)) {
                        $line=240;
                        $result="IdL";
                        if (true) break $try;
                      }
                      else {
                        $line=241;
                        if ($opMembrY($opAdditY("",\u03C3),preOps)) {
                          $line=242;
                          $result=$opAdditY("",\u03C3);
                          if (true) break $try;
                        }
                        else {
                          $line=244;
                          $result="Err";
                          if (true) break $try;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else {
          $line=246;
          if (((($opMembrY(\u03C3,skipChars)&&$opMembrY(q,preKW))&&!$bool($opMembrY(q,keyWords)))&&$opEqualY(((java.lang.String)q).charAt($int(0)),':'))) {
            $line=247;
            $result="Err";
            if (true) break $try;
          }
          else {
            $line=248;
            if ($opMembrY(\u03C3,skipChars)) {
              $line=249;
              $result="INIT";
              if (true) break $try;
            }
            else {
              $line=250;
              if (($opEqualY(q,"INIT")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
                $line=251;
                $result="Num";
                if (true) break $try;
              }
              else {
                $line=252;
                if (($opEqualY(q,"INIT")&&$opMembrY($opAdditY("",\u03C3),preKW))) {
                  $line=253;
                  $result=$opAdditY("",\u03C3);
                  if (true) break $try;
                }
                else {
                  $line=254;
                  if (($opEqualY(q,"INIT")&&$opMembrY(\u03C3,alphaUpper))) {
                    $line=255;
                    $result="IdU";
                    if (true) break $try;
                  }
                  else {
                    $line=256;
                    if (($opEqualY(q,"INIT")&&$opMembrY(\u03C3,alphaLower))) {
                      $line=257;
                      $result="IdL";
                      if (true) break $try;
                    }
                    else {
                      $line=258;
                      if (($opEqualY(q,"INIT")&&$opMembrY($opAdditY("",\u03C3),preOps))) {
                        $line=259;
                        $result=$opAdditY("",\u03C3);
                        if (true) break $try;
                      }
                      else {
                        $line=260;
                        if (($opMembrY(q,preKW)&&$opMembrY($opAdditY(q,\u03C3),preKW))) {
                          $line=261;
                          $result=$opAdditY(q,\u03C3);
                          if (true) break $try;
                        }
                        else {
                          $line=262;
                          if ((($opMembrY(q,preKW)&&$opMembrY(\u03C3,alphaNum))&&$opMembrY(((java.lang.String)q).charAt($int(0)),alphaUpper))) {
                            $line=263;
                            $result="IdU";
                            if (true) break $try;
                          }
                          else {
                            $line=264;
                            if ((($opMembrY(q,preKW)&&$opMembrY(\u03C3,alphaNum))&&$opMembrY(((java.lang.String)q).charAt($int(0)),alphaLower))) {
                              $line=265;
                              $result="IdL";
                              if (true) break $try;
                            }
                            else {
                              $line=266;
                              if (($opMembrY(q,preKW)&&$opMembrY($opAdditY("",\u03C3),preOps))) {
                                $line=267;
                                $result=$opAdditY("",\u03C3);
                                if (true) break $try;
                              }
                              else {
                                $line=268;
                                if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
                                  $line=269;
                                  $result="Num";
                                  if (true) break $try;
                                }
                                else {
                                  $line=270;
                                  if (($opEqualY(q,"Num")&&$opMembrY($opAdditY("",\u03C3),preOps))) {
                                    $line=271;
                                    $result=$opAdditY("",\u03C3);
                                    if (true) break $try;
                                  }
                                  else {
                                    $line=272;
                                    if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,alphaNum))) {
                                      $line=273;
                                      $result="Err";
                                      if (true) break $try;
                                    }
                                    else {
                                      $line=274;
                                      if (($opMembrY(q,Ids)&&$opMembrY(\u03C3,alphaNum))) {
                                        $line=275;
                                        $result=q;
                                        if (true) break $try;
                                      }
                                      else {
                                        $line=276;
                                        if (($opMembrY(q,Ids)&&$opMembrY($opAdditY("",\u03C3),preOps))) {
                                          $line=277;
                                          $result=$opAdditY("",\u03C3);
                                          if (true) break $try;
                                        }
                                        else {
                                          $line=279;
                                          $result="Err";
                                          if (true) break $try;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=281;
      $rethrow(new RuntimeException("The function \"\u03B4(state:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=284;
      $result="";
      if (true) break $try;
      $line=285;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=288;
      String s=null;
      s=$defaultValue(String.class);
      $line=290;
      s=$cast(String.class,$fix((($bool($opEqualY(\u03C3,'\n')))?("\\n"):($opAdditY("",\u03C3)))));
      $line=292;
      if ($opMembrY(q,preOps)) {
        $line=293;
        if (($opMembrY(\u03C3,skipChars)&&$opMembrY(q,allSymbols))) {
          $line=294;
          ((gold.structures.list.GArrayList)images).add(currentString);
          $line=295;
          currentString=$cast(String.class,$fix(""));
          $line=296;
          $result=LexerParserRobot202210.translationGet(q);
          if (true) break $try;
        }
        else {
          $line=297;
          if ($opMembrY($opAdditY(q,\u03C3),preOps)) {
            $line=298;
            currentString=$cast(String.class,$fix($opAdditY(currentString,s)));
            $line=299;
            $result="";
            if (true) break $try;
          }
          else {
            $line=300;
            if (($opMembrY(\u03C3,$opUnionY(StartOps,alphaNum))&&$opMembrY(q,allSymbols))) {
              $line=301;
              ((gold.structures.list.GArrayList)images).add(currentString);
              $line=302;
              currentString=$cast(String.class,$fix($opAdditY("",s)));
              $line=303;
              $result=LexerParserRobot202210.translationGet(q);
              if (true) break $try;
            }
            else {
              $line=304;
              if ($opMembrY(\u03C3,$opUnionY($opUnionY(StartOps,alphaNum),skipChars))) {
                $line=305;
                currentString=$cast(String.class,$fix($opAdditY("",s)));
                $line=306;
                $result=LexerParserRobot202210.translationPreOps(q);
                if (true) break $try;
              }
              else {
                $line=308;
                currentString=$cast(String.class,$fix($opAdditY(currentString,s)));
                $line=309;
                $result="";
                if (true) break $try;
              }
            }
          }
        }
      }
      else {
        $line=312;
        if ((!$opMembrY(q,GCollections.asSet("Err"))&&$opMembrY(\u03C3,$opUnionY(skipChars,StartOps)))) {
          $line=313;
          if ($opEqualY(q,"INIT")) {
            $line=314;
            currentString=$cast(String.class,$fix((($bool($opMembrY(\u03C3,StartOps)))?(s):(""))));
            $line=315;
            $result="";
            if (true) break $try;
          }
          else {
            $line=316;
            if ($opEqualY(LexerParserRobot202210.translationGet(q),null)) {
              $line=317;
              ((gold.structures.list.GArrayList)images).add(currentString);
              $line=318;
              currentString=$cast(String.class,$fix((($bool($opMembrY(\u03C3,$opUnionY(skipChars,StartOps))))?(s):(""))));
              $line=319;
              Object f=$fix($invokeMethod("charAt",q,new Object[]{0}));
              $line=320;
              if ($opMembrY(f,alphaUpper)) {
                $line=321;
                $result=LexerParserRobot202210.translationGet("IdU");
                if (true) break $try;
              }
              else {
                $line=322;
                if ($opMembrY(f,alphaLower)) {
                  $line=323;
                  $result=LexerParserRobot202210.translationGet("IdL");
                  if (true) break $try;
                }
                else {
                  $line=325;
                  $result=null;
                  if (true) break $try;
                }
              }
            }
            else {
              $line=328;
              ((gold.structures.list.GArrayList)images).add(currentString);
              $line=329;
              currentString=$cast(String.class,$fix((($bool($opMembrY(\u03C3,$opUnionY(skipChars,StartOps))))?(s):(""))));
              $line=330;
              $result=LexerParserRobot202210.translationGet(q);
              if (true) break $try;
            }
          }
        }
        else {
          $line=333;
          currentString=$cast(String.class,$fix($opAdditY(currentString,s)));
          $line=334;
          $result="";
          if (true) break $try;
        }
      }
      $line=336;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"h",$line);
    }
    return $result;
  }
  public static IPushdownAutomaton createParser() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=340;
      Object Q=$fix($opIntvlY(0,6));
      $line=341;
      Object \u03A3=$fix(Out);
      $line=342;
      Object \u0393=$fix(GCollections.asSet('1'));
      $line=343;
      Object q_0=$fix(0);
      $line=344;
      Object F=$fix(GCollections.asSet(0));
      $line=346;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=351;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(0,1,$cast(java.lang.String.class,"(")),new Object[]{});
      $line=352;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(1,2,$cast(java.lang.String.class,'M')),new Object[]{});
      $line=353;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(2,3,$cast(java.lang.String.class,'#')),new Object[]{});
      $line=354;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(2,3,$cast(java.lang.String.class,'V')),new Object[]{});
      $line=355;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(2,3,$cast(java.lang.String.class,'v')),new Object[]{});
      $line=356;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(3,0,$cast(java.lang.String.class,')')),new Object[]{});
      $line=381;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(1,4,$cast(java.lang.String.class,'m')),new Object[]{});
      $line=382;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(4,5,$cast(java.lang.String.class,'#')),new Object[]{});
      $line=383;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(4,5,$cast(java.lang.String.class,'V')),new Object[]{});
      $line=384;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(4,5,$cast(java.lang.String.class,'v')),new Object[]{});
      $line=385;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(5,3,$cast(java.lang.String.class,'L')),new Object[]{});
      $line=387;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(1,6,$cast(java.lang.String.class,'f')),new Object[]{});
      $line=388;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(6,3,$cast(java.lang.String.class,'N')),new Object[]{});
      $line=424;
      $result=M;
      if (true) break $try;
      $line=425;
      $rethrow(new RuntimeException("The function \"createParser()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"createParser",$line);
    }
    return $cast(IPushdownAutomaton.class,$result);
  }
  public static Object testLexerParser(ITransducer M, IPushdownAutomaton P) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=428;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=429;
      String string=null;
      string=$defaultValue(String.class);
      $line=430;
      Object inputA=$fix(LexerParserRobot202210.elements(((gold.structures.automaton.ITransducer)M).getInputAlphabet()));
      $line=431;
      Object input=$fix("");
      $line=433;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=434;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=435;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=436;
      string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      $line=438;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=439;
        string=$cast(String.class,$fix($opAdditY(string,"  \n ")));
        $line=440;
        input=$fix("");
        $line=441;
        while (true) {
          if (!(!$opEqualY(((java.lang.String)string).charAt($int(0)),'$'))) break;
          $line=442;
          input=$fix($opAdditY(input,string));
          $line=443;
          string=$cast(String.class,$fix($opAdditY(((java.util.Scanner)sc).nextLine()," \n ")));
        }
        $line=446;
        if ($opSbsetY(LexerParserRobot202210.chars(input),inputA)) {
          $line=447;
          currentString=$cast(String.class,$fix(""));
          $line=448;
          images=$cast(GArrayList.class,$fix($invokeConstructor(GArrayList.class,new Object[]{})));
          $line=449;
          Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,input)));
          $line=450;
          Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
          $line=452;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The input was ",(($bool(result))?(""):("not ")))," accepted by the lexer.")}));
          $line=453;
          if ($bool(result)) {
            $line=454;
            System.out.println($message(new Object[]{$opAdditY("Token Stream:  ",tokenStream)}));
            $line=455;
            System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
            $line=456;
            result=$fix(((gold.structures.automaton.IPushdownAutomaton)P).acceptsString($cast(java.lang.String.class,tokenStream)));
            $line=457;
            System.out.println($message(new Object[]{$opAdditY("Parser result: ",(($bool(result))?("accepted "):("rejected ")))}));
          }
          else {
            $line=459;
            System.out.println($message(new Object[]{$opAdditY("Partial token Stream ",tokenStream)}));
          }
        }
        else {
          $line=462;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid characters: ",$opDiffeY(LexerParserRobot202210.chars(input),inputA))}));
        }
        $line=464;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=466;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=467;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=468;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      }
      $line=470;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=471;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot202210.class,"testLexerParser",$line);
    }
    return $result;
  }
}
